{
  "files": {
    "src/app.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 18
            },
            "start": {
              "column": 17,
              "line": 6
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 11
            },
            "start": {
              "column": 23,
              "line": 11
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 12
            },
            "start": {
              "column": 25,
              "line": 12
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 13
            },
            "start": {
              "column": 23,
              "line": 13
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 24,
              "line": 20
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 21
            },
            "start": {
              "column": 50,
              "line": 21
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 22
            },
            "start": {
              "column": 23,
              "line": 22
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 22
            },
            "start": {
              "column": 23,
              "line": 22
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "EqualityOperator",
          "replacement": "navigator.gpu === undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 22
            },
            "start": {
              "column": 23,
              "line": 22
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 38
            },
            "start": {
              "column": 20,
              "line": 24
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 34
            },
            "start": {
              "column": 11,
              "line": 25
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 27
            },
            "start": {
              "column": 13,
              "line": 27
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 27
            },
            "start": {
              "column": 13,
              "line": 27
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 30
            },
            "start": {
              "column": 22,
              "line": 27
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 28
            },
            "start": {
              "column": 38,
              "line": 28
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 29
            },
            "start": {
              "column": 36,
              "line": 29
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 33
            },
            "start": {
              "column": 16,
              "line": 30
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 31
            },
            "start": {
              "column": 38,
              "line": 31
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 32
            },
            "start": {
              "column": 36,
              "line": 32
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 37
            },
            "start": {
              "column": 15,
              "line": 34
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 35
            },
            "start": {
              "column": 36,
              "line": 35
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 36
            },
            "start": {
              "column": 34,
              "line": 36
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 41
            },
            "start": {
              "column": 12,
              "line": 38
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 39
            },
            "start": {
              "column": 34,
              "line": 39
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 40
            },
            "start": {
              "column": 32,
              "line": 40
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 53
            },
            "start": {
              "column": 18,
              "line": 44
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 46
            },
            "start": {
              "column": 20,
              "line": 46
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 52
            },
            "start": {
              "column": 29,
              "line": 52
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 52
            },
            "start": {
              "column": 63,
              "line": 52
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 114
            },
            "start": {
              "column": 25,
              "line": 55
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 57
            },
            "start": {
              "column": 31,
              "line": 57
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 61
            },
            "start": {
              "column": 58,
              "line": 57
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 58
            },
            "start": {
              "column": 28,
              "line": 58
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 60
            },
            "start": {
              "column": 44,
              "line": 58
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 64
            },
            "start": {
              "column": 29,
              "line": 64
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 64
            },
            "start": {
              "column": 62,
              "line": 64
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 66
            },
            "start": {
              "column": 77,
              "line": 64
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 69
            },
            "start": {
              "column": 29,
              "line": 69
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 69
            },
            "start": {
              "column": 58,
              "line": 69
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 71
            },
            "start": {
              "column": 73,
              "line": 69
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 72
            },
            "start": {
              "column": 29,
              "line": 72
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 72
            },
            "start": {
              "column": 59,
              "line": 72
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 74
            },
            "start": {
              "column": 74,
              "line": 72
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 75
            },
            "start": {
              "column": 29,
              "line": 75
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 75
            },
            "start": {
              "column": 60,
              "line": 75
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 77
            },
            "start": {
              "column": 75,
              "line": 75
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 78
            },
            "start": {
              "column": 29,
              "line": 78
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 78
            },
            "start": {
              "column": 58,
              "line": 78
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 80
            },
            "start": {
              "column": 73,
              "line": 78
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 83
            },
            "start": {
              "column": 29,
              "line": 83
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 83
            },
            "start": {
              "column": 58,
              "line": 83
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 86
            },
            "start": {
              "column": 74,
              "line": 83
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 84
            },
            "start": {
              "column": 31,
              "line": 84
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 87
            },
            "start": {
              "column": 29,
              "line": 87
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 87
            },
            "start": {
              "column": 59,
              "line": 87
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 90
            },
            "start": {
              "column": 75,
              "line": 87
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 88
            },
            "start": {
              "column": 31,
              "line": 88
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 91
            },
            "start": {
              "column": 29,
              "line": 91
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 91
            },
            "start": {
              "column": 59,
              "line": 91
            }
          }
        },
        {
          "id": "61",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 93
            },
            "start": {
              "column": 76,
              "line": 91
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 96
            },
            "start": {
              "column": 29,
              "line": 96
            }
          }
        },
        {
          "id": "63",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 96
            },
            "start": {
              "column": 68,
              "line": 96
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 98
            },
            "start": {
              "column": 83,
              "line": 96
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 99
            },
            "start": {
              "column": 29,
              "line": 99
            }
          }
        },
        {
          "id": "66",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 99
            },
            "start": {
              "column": 64,
              "line": 99
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 101
            },
            "start": {
              "column": 79,
              "line": 99
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 102
            },
            "start": {
              "column": 29,
              "line": 102
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 102
            },
            "start": {
              "column": 63,
              "line": 102
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 104
            },
            "start": {
              "column": 78,
              "line": 102
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 107
            },
            "start": {
              "column": 33,
              "line": 107
            }
          }
        },
        {
          "id": "72",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 109
            },
            "start": {
              "column": 61,
              "line": 107
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 110
            },
            "start": {
              "column": 33,
              "line": 110
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 113
            },
            "start": {
              "column": 57,
              "line": 110
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 111
            },
            "start": {
              "column": 25,
              "line": 111
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 132
            },
            "start": {
              "column": 22,
              "line": 116
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 118
            },
            "start": {
              "column": 31,
              "line": 118
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 121
            },
            "start": {
              "column": 58,
              "line": 118
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 119
            },
            "start": {
              "column": 28,
              "line": 119
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 119
            },
            "start": {
              "column": 38,
              "line": 119
            }
          }
        },
        {
          "id": "81",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 119
            },
            "start": {
              "column": 55,
              "line": 119
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 120
            },
            "start": {
              "column": 25,
              "line": 120
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 120
            },
            "start": {
              "column": 40,
              "line": 120
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 122
            },
            "start": {
              "column": 28,
              "line": 122
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 122
            },
            "start": {
              "column": 69,
              "line": 122
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 122
            },
            "start": {
              "column": 79,
              "line": 122
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 108,
              "line": 122
            },
            "start": {
              "column": 96,
              "line": 122
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 123
            },
            "start": {
              "column": 28,
              "line": 123
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 85,
              "line": 123
            },
            "start": {
              "column": 72,
              "line": 123
            }
          }
        },
        {
          "id": "90",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 102,
              "line": 123
            },
            "start": {
              "column": 87,
              "line": 123
            }
          }
        },
        {
          "id": "91",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 126
            },
            "start": {
              "column": 31,
              "line": 126
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 128
            },
            "start": {
              "column": 66,
              "line": 126
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 127
            },
            "start": {
              "column": 32,
              "line": 127
            }
          }
        },
        {
          "id": "94",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 129
            },
            "start": {
              "column": 52,
              "line": 129
            }
          }
        },
        {
          "id": "95",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 134
            },
            "start": {
              "column": 29,
              "line": 134
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 144
            },
            "start": {
              "column": 50,
              "line": 134
            }
          }
        },
        {
          "id": "97",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 135
            },
            "start": {
              "column": 55,
              "line": 135
            }
          }
        },
        {
          "id": "98",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 136
            },
            "start": {
              "column": 50,
              "line": 136
            }
          }
        },
        {
          "id": "99",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 138
            },
            "start": {
              "column": 9,
              "line": 138
            }
          }
        },
        {
          "id": "100",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 138
            },
            "start": {
              "column": 9,
              "line": 138
            }
          }
        },
        {
          "id": "101",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 141
            },
            "start": {
              "column": 15,
              "line": 138
            }
          }
        },
        {
          "id": "102",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 139
            },
            "start": {
              "column": 42,
              "line": 139
            }
          }
        },
        {
          "id": "103",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 143
            },
            "start": {
              "column": 12,
              "line": 141
            }
          }
        },
        {
          "id": "104",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 142
            },
            "start": {
              "column": 39,
              "line": 142
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 152
            },
            "start": {
              "column": 36,
              "line": 146
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 147
            },
            "start": {
              "column": 49,
              "line": 147
            }
          }
        },
        {
          "id": "107",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 148
            },
            "start": {
              "column": 50,
              "line": 148
            }
          }
        },
        {
          "id": "108",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 150
            },
            "start": {
              "column": 31,
              "line": 150
            }
          }
        },
        {
          "id": "109",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 151
            },
            "start": {
              "column": 9,
              "line": 151
            }
          }
        },
        {
          "id": "110",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 151
            },
            "start": {
              "column": 9,
              "line": 151
            }
          }
        },
        {
          "id": "111",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 218
            },
            "start": {
              "column": 24,
              "line": 154
            }
          }
        },
        {
          "id": "112",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 155
            },
            "start": {
              "column": 9,
              "line": 155
            }
          }
        },
        {
          "id": "113",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 155
            },
            "start": {
              "column": 9,
              "line": 155
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "MethodExpression",
          "replacement": "document.getElementById('llm-prompt').value",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 157
            },
            "start": {
              "column": 20,
              "line": 157
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 157
            },
            "start": {
              "column": 44,
              "line": 157
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "BooleanLiteral",
          "replacement": "prompt",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "118",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 161
            },
            "start": {
              "column": 18,
              "line": 158
            }
          }
        },
        {
          "id": "120",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 159
            },
            "start": {
              "column": 22,
              "line": 159
            }
          }
        },
        {
          "id": "121",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 163
            },
            "start": {
              "column": 25,
              "line": 163
            }
          }
        },
        {
          "id": "122",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 164
            },
            "start": {
              "column": 49,
              "line": 164
            }
          }
        },
        {
          "id": "123",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 165
            },
            "start": {
              "column": 44,
              "line": 165
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 169
            },
            "start": {
              "column": 21,
              "line": 166
            }
          }
        },
        {
          "id": "125",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 167
            },
            "start": {
              "column": 37,
              "line": 167
            }
          }
        },
        {
          "id": "126",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 168
            },
            "start": {
              "column": 45,
              "line": 168
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 171
            },
            "start": {
              "column": 31,
              "line": 171
            }
          }
        },
        {
          "id": "128",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 172
            },
            "start": {
              "column": 28,
              "line": 172
            }
          }
        },
        {
          "id": "129",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 173
            },
            "start": {
              "column": 26,
              "line": 173
            }
          }
        },
        {
          "id": "130",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 209
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 176
            },
            "start": {
              "column": 25,
              "line": 176
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 176
            },
            "start": {
              "column": 31,
              "line": 176
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 204
            },
            "start": {
              "column": 39,
              "line": 182
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 200
            },
            "start": {
              "column": 29,
              "line": 183
            }
          }
        },
        {
          "id": "135",
          "mutatorName": "BooleanLiteral",
          "replacement": "firstTokenTime",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 184
            },
            "start": {
              "column": 15,
              "line": 184
            }
          }
        },
        {
          "id": "136",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 184
            },
            "start": {
              "column": 15,
              "line": 184
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 184
            },
            "start": {
              "column": 15,
              "line": 184
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 188
            },
            "start": {
              "column": 32,
              "line": 184
            }
          }
        },
        {
          "id": "139",
          "mutatorName": "ArithmeticOperator",
          "replacement": "firstTokenTime + startTime",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 186
            },
            "start": {
              "column": 26,
              "line": 186
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 187
            },
            "start": {
              "column": 40,
              "line": 187
            }
          }
        },
        {
          "id": "141",
          "mutatorName": "UpdateOperator",
          "replacement": "tokenCount--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 190
            },
            "start": {
              "column": 11,
              "line": 190
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "AssignmentOperator",
          "replacement": "output.textContent -= token",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 191
            },
            "start": {
              "column": 11,
              "line": 191
            }
          }
        },
        {
          "id": "143",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 195
            },
            "start": {
              "column": 15,
              "line": 195
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 195
            },
            "start": {
              "column": 15,
              "line": 195
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 199
            },
            "start": {
              "column": 31,
              "line": 195
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(Date.now() - firstTokenTime) * 1000",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 196
            },
            "start": {
              "column": 29,
              "line": 196
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "ArithmeticOperator",
          "replacement": "Date.now() + firstTokenTime",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 196
            },
            "start": {
              "column": 30,
              "line": 196
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 197
            },
            "start": {
              "column": 34,
              "line": 197
            }
          }
        },
        {
          "id": "149",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 197
            },
            "start": {
              "column": 34,
              "line": 197
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "EqualityOperator",
          "replacement": "elapsed >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 197
            },
            "start": {
              "column": 34,
              "line": 197
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "EqualityOperator",
          "replacement": "elapsed <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 197
            },
            "start": {
              "column": 34,
              "line": 197
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "ArithmeticOperator",
          "replacement": "tokenCount * elapsed",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 197
            },
            "start": {
              "column": 49,
              "line": 197
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 197
            },
            "start": {
              "column": 84,
              "line": 197
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 198
            },
            "start": {
              "column": 48,
              "line": 198
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 203
            },
            "start": {
              "column": 35,
              "line": 201
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 206
            },
            "start": {
              "column": 31,
              "line": 206
            }
          }
        },
        {
          "id": "157",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 206
            },
            "start": {
              "column": 59,
              "line": 206
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 207
            },
            "start": {
              "column": 31,
              "line": 207
            }
          }
        },
        {
          "id": "159",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 207
            },
            "start": {
              "column": 57,
              "line": 207
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 212
            },
            "start": {
              "column": 21,
              "line": 209
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 210
            },
            "start": {
              "column": 22,
              "line": 210
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 211
            },
            "start": {
              "column": 21,
              "line": 211
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 217
            },
            "start": {
              "column": 15,
              "line": 212
            }
          }
        },
        {
          "id": "164",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 213
            },
            "start": {
              "column": 27,
              "line": 213
            }
          }
        },
        {
          "id": "165",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 214
            },
            "start": {
              "column": 33,
              "line": 214
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 215
            },
            "start": {
              "column": 30,
              "line": 215
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 216
            },
            "start": {
              "column": 25,
              "line": 216
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 258
            },
            "start": {
              "column": 19,
              "line": 220
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "MethodExpression",
          "replacement": "document.getElementById('tts-text').value",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 221
            },
            "start": {
              "column": 18,
              "line": 221
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 221
            },
            "start": {
              "column": 42,
              "line": 221
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "BooleanLiteral",
          "replacement": "text",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 222
            },
            "start": {
              "column": 9,
              "line": 222
            }
          }
        },
        {
          "id": "172",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 222
            },
            "start": {
              "column": 9,
              "line": 222
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 222
            },
            "start": {
              "column": 9,
              "line": 222
            }
          }
        },
        {
          "id": "174",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 225
            },
            "start": {
              "column": 16,
              "line": 222
            }
          }
        },
        {
          "id": "175",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 223
            },
            "start": {
              "column": 22,
              "line": 223
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 227
            },
            "start": {
              "column": 9,
              "line": 227
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 227
            },
            "start": {
              "column": 9,
              "line": 227
            }
          }
        },
        {
          "id": "178",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 229
            },
            "start": {
              "column": 26,
              "line": 227
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 250
            },
            "start": {
              "column": 9,
              "line": 231
            }
          }
        },
        {
          "id": "180",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 232
            },
            "start": {
              "column": 25,
              "line": 232
            }
          }
        },
        {
          "id": "181",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 232
            },
            "start": {
              "column": 31,
              "line": 232
            }
          }
        },
        {
          "id": "182",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 233
            },
            "start": {
              "column": 25,
              "line": 233
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 236
            },
            "start": {
              "column": 48,
              "line": 236
            }
          }
        },
        {
          "id": "184",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 237
            },
            "start": {
              "column": 28,
              "line": 237
            }
          }
        },
        {
          "id": "185",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 245
            },
            "start": {
              "column": 34,
              "line": 239
            }
          }
        },
        {
          "id": "186",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 244
            },
            "start": {
              "column": 35,
              "line": 242
            }
          }
        },
        {
          "id": "187",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 247
            },
            "start": {
              "column": 31,
              "line": 247
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 247
            },
            "start": {
              "column": 59,
              "line": 247
            }
          }
        },
        {
          "id": "189",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 248
            },
            "start": {
              "column": 31,
              "line": 248
            }
          }
        },
        {
          "id": "190",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 248
            },
            "start": {
              "column": 57,
              "line": 248
            }
          }
        },
        {
          "id": "191",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 255
            },
            "start": {
              "column": 21,
              "line": 250
            }
          }
        },
        {
          "id": "192",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 251
            },
            "start": {
              "column": 22,
              "line": 251
            }
          }
        },
        {
          "id": "193",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 252
            },
            "start": {
              "column": 21,
              "line": 252
            }
          }
        },
        {
          "id": "194",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 253
            },
            "start": {
              "column": 25,
              "line": 253
            }
          }
        },
        {
          "id": "195",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 257
            },
            "start": {
              "column": 15,
              "line": 255
            }
          }
        },
        {
          "id": "196",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 256
            },
            "start": {
              "column": 25,
              "line": 256
            }
          }
        },
        {
          "id": "197",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 263
            },
            "start": {
              "column": 14,
              "line": 260
            }
          }
        },
        {
          "id": "198",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 268
            },
            "start": {
              "column": 15,
              "line": 265
            }
          }
        },
        {
          "id": "199",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 275
            },
            "start": {
              "column": 13,
              "line": 270
            }
          }
        },
        {
          "id": "200",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 273
            },
            "start": {
              "column": 23,
              "line": 273
            }
          }
        },
        {
          "id": "201",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 337
            },
            "start": {
              "column": 28,
              "line": 277
            }
          }
        },
        {
          "id": "202",
          "mutatorName": "MethodExpression",
          "replacement": "document.getElementById('combined-prompt').value",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 278
            },
            "start": {
              "column": 20,
              "line": 278
            }
          }
        },
        {
          "id": "203",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 278
            },
            "start": {
              "column": 44,
              "line": 278
            }
          }
        },
        {
          "id": "204",
          "mutatorName": "BooleanLiteral",
          "replacement": "prompt",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 279
            },
            "start": {
              "column": 9,
              "line": 279
            }
          }
        },
        {
          "id": "205",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 279
            },
            "start": {
              "column": 9,
              "line": 279
            }
          }
        },
        {
          "id": "206",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 279
            },
            "start": {
              "column": 9,
              "line": 279
            }
          }
        },
        {
          "id": "207",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 282
            },
            "start": {
              "column": 18,
              "line": 279
            }
          }
        },
        {
          "id": "208",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 280
            },
            "start": {
              "column": 22,
              "line": 280
            }
          }
        },
        {
          "id": "209",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 284
            },
            "start": {
              "column": 9,
              "line": 284
            }
          }
        },
        {
          "id": "210",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 284
            },
            "start": {
              "column": 9,
              "line": 284
            }
          }
        },
        {
          "id": "211",
          "mutatorName": "LogicalOperator",
          "replacement": "this.isGenerating && this.isSpeaking",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 284
            },
            "start": {
              "column": 9,
              "line": 284
            }
          }
        },
        {
          "id": "212",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 286
            },
            "start": {
              "column": 25,
              "line": 286
            }
          }
        },
        {
          "id": "213",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 287
            },
            "start": {
              "column": 49,
              "line": 287
            }
          }
        },
        {
          "id": "214",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 288
            },
            "start": {
              "column": 44,
              "line": 288
            }
          }
        },
        {
          "id": "215",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 290
            },
            "start": {
              "column": 31,
              "line": 290
            }
          }
        },
        {
          "id": "216",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 291
            },
            "start": {
              "column": 28,
              "line": 291
            }
          }
        },
        {
          "id": "217",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 292
            },
            "start": {
              "column": 24,
              "line": 292
            }
          }
        },
        {
          "id": "218",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 327
            },
            "start": {
              "column": 9,
              "line": 294
            }
          }
        },
        {
          "id": "219",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 295
            },
            "start": {
              "column": 25,
              "line": 295
            }
          }
        },
        {
          "id": "220",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 295
            },
            "start": {
              "column": 31,
              "line": 295
            }
          }
        },
        {
          "id": "221",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 298
            },
            "start": {
              "column": 27,
              "line": 298
            }
          }
        },
        {
          "id": "222",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 308
            },
            "start": {
              "column": 39,
              "line": 299
            }
          }
        },
        {
          "id": "223",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 304
            },
            "start": {
              "column": 29,
              "line": 300
            }
          }
        },
        {
          "id": "224",
          "mutatorName": "AssignmentOperator",
          "replacement": "generatedText -= token",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 301
            },
            "start": {
              "column": 11,
              "line": 301
            }
          }
        },
        {
          "id": "225",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 307
            },
            "start": {
              "column": 35,
              "line": 305
            }
          }
        },
        {
          "id": "226",
          "mutatorName": "ArithmeticOperator",
          "replacement": "progress.percentage / 0.7",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 306
            },
            "start": {
              "column": 31,
              "line": 306
            }
          }
        },
        {
          "id": "227",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 89,
              "line": 306
            },
            "start": {
              "column": 58,
              "line": 306
            }
          }
        },
        {
          "id": "228",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 311
            },
            "start": {
              "column": 27,
              "line": 311
            }
          }
        },
        {
          "id": "229",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 312
            },
            "start": {
              "column": 25,
              "line": 312
            }
          }
        },
        {
          "id": "230",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 313
            },
            "start": {
              "column": 33,
              "line": 313
            }
          }
        },
        {
          "id": "231",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 315
            },
            "start": {
              "column": 26,
              "line": 315
            }
          }
        },
        {
          "id": "232",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 322
            },
            "start": {
              "column": 43,
              "line": 316
            }
          }
        },
        {
          "id": "233",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 321
            },
            "start": {
              "column": 35,
              "line": 319
            }
          }
        },
        {
          "id": "234",
          "mutatorName": "ArithmeticOperator",
          "replacement": "70 - progress.percentage * 0.3",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 320
            },
            "start": {
              "column": 31,
              "line": 320
            }
          }
        },
        {
          "id": "235",
          "mutatorName": "ArithmeticOperator",
          "replacement": "progress.percentage / 0.3",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 320
            },
            "start": {
              "column": 36,
              "line": 320
            }
          }
        },
        {
          "id": "236",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 320
            },
            "start": {
              "column": 63,
              "line": 320
            }
          }
        },
        {
          "id": "237",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 324
            },
            "start": {
              "column": 31,
              "line": 324
            }
          }
        },
        {
          "id": "238",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 324
            },
            "start": {
              "column": 59,
              "line": 324
            }
          }
        },
        {
          "id": "239",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 325
            },
            "start": {
              "column": 31,
              "line": 325
            }
          }
        },
        {
          "id": "240",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 325
            },
            "start": {
              "column": 59,
              "line": 325
            }
          }
        },
        {
          "id": "241",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 330
            },
            "start": {
              "column": 21,
              "line": 327
            }
          }
        },
        {
          "id": "242",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 328
            },
            "start": {
              "column": 22,
              "line": 328
            }
          }
        },
        {
          "id": "243",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 329
            },
            "start": {
              "column": 21,
              "line": 329
            }
          }
        },
        {
          "id": "244",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 336
            },
            "start": {
              "column": 15,
              "line": 330
            }
          }
        },
        {
          "id": "245",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 331
            },
            "start": {
              "column": 27,
              "line": 331
            }
          }
        },
        {
          "id": "246",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 332
            },
            "start": {
              "column": 25,
              "line": 332
            }
          }
        },
        {
          "id": "247",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 333
            },
            "start": {
              "column": 33,
              "line": 333
            }
          }
        },
        {
          "id": "248",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 334
            },
            "start": {
              "column": 30,
              "line": 334
            }
          }
        },
        {
          "id": "249",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 335
            },
            "start": {
              "column": 25,
              "line": 335
            }
          }
        },
        {
          "id": "250",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 354
            },
            "start": {
              "column": 22,
              "line": 344
            }
          }
        },
        {
          "id": "251",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 345
            },
            "start": {
              "column": 52,
              "line": 345
            }
          }
        },
        {
          "id": "252",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 346
            },
            "start": {
              "column": 50,
              "line": 346
            }
          }
        },
        {
          "id": "253",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 349
            },
            "start": {
              "column": 37,
              "line": 349
            }
          }
        },
        {
          "id": "254",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 353
            },
            "start": {
              "column": 22,
              "line": 351
            }
          }
        },
        {
          "id": "255",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 44,
              "line": 352
            },
            "start": {
              "column": 36,
              "line": 352
            }
          }
        },
        {
          "id": "256",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 358
            },
            "start": {
              "column": 27,
              "line": 358
            }
          }
        },
        {
          "id": "257",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 360
            },
            "start": {
              "column": 53,
              "line": 358
            }
          }
        }
      ],
      "source": "import { LLMModule } from './llm.js';\nimport { TTSModule } from './tts.js';\nimport { AudioModule } from './audio.js';\n\nclass AppController {\n  constructor() {\n    this.llm = new LLMModule();\n    this.tts = new TTSModule();\n    this.audio = new AudioModule();\n    \n    this.currentTab = 'llm-stream';\n    this.isGenerating = false;\n    this.isSpeaking = false;\n    \n    this.initializeUI();\n    this.setupEventListeners();\n    this.detectDevice();\n  }\n\n  async detectDevice() {\n    const deviceStatus = document.getElementById('device-status');\n    const hasWebGPU = navigator.gpu !== undefined;\n    \n    if (hasWebGPU) {\n      try {\n        const adapter = await navigator.gpu.requestAdapter();\n        if (adapter) {\n          deviceStatus.textContent = 'webgpu';\n          deviceStatus.className = 'text-green-600';\n        } else {\n          deviceStatus.textContent = 'wasm (webgpu unavailable)';\n          deviceStatus.className = 'text-orange-600';\n        }\n      } catch {\n        deviceStatus.textContent = 'wasm (webgpu error)';\n        deviceStatus.className = 'text-orange-600';\n      }\n    } else {\n      deviceStatus.textContent = 'wasm (webgpu unsupported)';\n      deviceStatus.className = 'text-orange-600';\n    }\n  }\n\n  initializeUI() {\n    // Initialize tab switching\n    this.switchTab('llm-stream');\n    \n    // Initialize TTS controls\n    this.updateTTSControls();\n    \n    // Hide loading progress initially\n    document.getElementById('loading-progress').classList.add('hidden');\n  }\n\n  setupEventListeners() {\n    // Tab switching\n    document.querySelectorAll('.tab-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        this.switchTab(e.target.dataset.tab);\n      });\n    });\n\n    // LLM Stream tab\n    document.getElementById('generate-btn').addEventListener('click', () => {\n      this.generateText();\n    });\n\n    // TTS Only tab\n    document.getElementById('tts-play').addEventListener('click', () => {\n      this.playTTS();\n    });\n    document.getElementById('tts-pause').addEventListener('click', () => {\n      this.pauseTTS();\n    });\n    document.getElementById('tts-resume').addEventListener('click', () => {\n      this.resumeTTS();\n    });\n    document.getElementById('tts-stop').addEventListener('click', () => {\n      this.stopTTS();\n    });\n\n    // TTS controls\n    document.getElementById('tts-rate').addEventListener('input', (e) => {\n      document.getElementById('rate-value').textContent = e.target.value;\n      this.tts.setRate(parseFloat(e.target.value));\n    });\n    document.getElementById('tts-pitch').addEventListener('input', (e) => {\n      document.getElementById('pitch-value').textContent = e.target.value;\n      this.tts.setPitch(parseFloat(e.target.value));\n    });\n    document.getElementById('tts-voice').addEventListener('change', (e) => {\n      this.tts.setVoice(e.target.value);\n    });\n\n    // LLM → TTS tab\n    document.getElementById('generate-speak-btn').addEventListener('click', () => {\n      this.generateAndSpeak();\n    });\n    document.getElementById('combined-pause').addEventListener('click', () => {\n      this.pauseTTS();\n    });\n    document.getElementById('combined-stop').addEventListener('click', () => {\n      this.stopTTS();\n    });\n\n    // Audio module events\n    this.audio.addEventListener('chunk-complete', (data) => {\n      this.tts.markSentenceSpoken(data.sentenceIndex);\n    });\n    this.audio.addEventListener('playback-ended', () => {\n      this.isSpeaking = false;\n      this.updateTTSControls();\n    });\n  }\n\n  switchTab(tabName) {\n    // Update tab buttons\n    document.querySelectorAll('.tab-btn').forEach(btn => {\n      btn.classList.remove('active', 'bg-indigo-600', 'text-white');\n      btn.classList.add('bg-gray-200', 'text-gray-700');\n    });\n    document.querySelector(`[data-tab=\"${tabName}\"]`).classList.add('active', 'bg-indigo-600', 'text-white');\n    document.querySelector(`[data-tab=\"${tabName}\"]`).classList.remove('bg-gray-200', 'text-gray-700');\n\n    // Update tab content\n    document.querySelectorAll('.tab-content').forEach(content => {\n      content.classList.remove('active');\n    });\n    document.getElementById(tabName).classList.add('active');\n\n    this.currentTab = tabName;\n  }\n\n  showProgress(show, text = 'Loading models...') {\n    const progressContainer = document.getElementById('loading-progress');\n    const progressText = document.getElementById('loading-text');\n    \n    if (show) {\n      progressContainer.classList.remove('hidden');\n      progressText.textContent = text;\n    } else {\n      progressContainer.classList.add('hidden');\n    }\n  }\n\n  updateProgress(percentage, text) {\n    const progressBar = document.getElementById('progress-bar');\n    const progressText = document.getElementById('loading-text');\n    \n    progressBar.style.width = `${percentage}%`;\n    if (text) progressText.textContent = text;\n  }\n\n  async generateText() {\n    if (this.isGenerating) return;\n\n    const prompt = document.getElementById('llm-prompt').value.trim();\n    if (!prompt) {\n      this.showError('Please enter a prompt');\n      return;\n    }\n\n    this.isGenerating = true;\n    const generateBtn = document.getElementById('generate-btn');\n    const output = document.getElementById('llm-output');\n    const statsEl = {\n      ttfb: document.getElementById('ttfb'),\n      tokensPerSec: document.getElementById('tokens-per-sec')\n    };\n\n    generateBtn.textContent = 'Generating...';\n    generateBtn.disabled = true;\n    output.textContent = '';\n\n    try {\n      this.showProgress(true, 'Loading LLM model...');\n      \n      let startTime = Date.now();\n      let firstTokenTime = null;\n      let tokenCount = 0;\n\n      await this.llm.generate(prompt, {\n        onToken: (token) => {\n          if (!firstTokenTime) {\n            firstTokenTime = Date.now();\n            const ttfb = firstTokenTime - startTime;\n            statsEl.ttfb.textContent = `TTFB: ${ttfb}ms`;\n          }\n          \n          tokenCount++;\n          output.textContent += token;\n          output.scrollTop = output.scrollHeight;\n          \n          // Update tokens per second\n          if (firstTokenTime) {\n            const elapsed = (Date.now() - firstTokenTime) / 1000;\n            const tokensPerSec = elapsed > 0 ? (tokenCount / elapsed).toFixed(1) : '0';\n            statsEl.tokensPerSec.textContent = `Tokens/s: ${tokensPerSec}`;\n          }\n        },\n        onProgress: (progress) => {\n          this.updateProgress(progress.percentage, progress.text);\n        }\n      });\n\n      document.getElementById('llm-status').textContent = 'loaded';\n      document.getElementById('llm-status').className = 'text-green-600';\n      \n    } catch (error) {\n      this.showError(`Generation failed: ${error.message}`);\n      console.error('Generation error:', error);\n    } finally {\n      this.isGenerating = false;\n      generateBtn.textContent = 'Generate';\n      generateBtn.disabled = false;\n      this.showProgress(false);\n    }\n  }\n\n  async playTTS() {\n    const text = document.getElementById('tts-text').value.trim();\n    if (!text) {\n      this.showError('Please enter text to speak');\n      return;\n    }\n\n    if (this.isSpeaking) {\n      this.stopTTS();\n    }\n\n    try {\n      this.showProgress(true, 'Loading TTS model...');\n      this.isSpeaking = true;\n      this.updateTTSControls();\n\n      const outputEl = document.getElementById('tts-output');\n      outputEl.innerHTML = '';\n\n      await this.tts.speak(text, {\n        outputElement: outputEl,\n        audioModule: this.audio,\n        onProgress: (progress) => {\n          this.updateProgress(progress.percentage, progress.text);\n        }\n      });\n\n      document.getElementById('tts-status').textContent = 'loaded';\n      document.getElementById('tts-status').className = 'text-blue-600';\n\n    } catch (error) {\n      this.showError(`TTS failed: ${error.message}`);\n      console.error('TTS error:', error);\n      this.isSpeaking = false;\n      this.updateTTSControls();\n    } finally {\n      this.showProgress(false);\n    }\n  }\n\n  pauseTTS() {\n    this.tts.pause();\n    this.audio.pause();\n  }\n\n  resumeTTS() {\n    this.tts.resume();\n    this.audio.resume();\n  }\n\n  stopTTS() {\n    this.tts.stop();\n    this.audio.stop();\n    this.isSpeaking = false;\n    this.updateTTSControls();\n  }\n\n  async generateAndSpeak() {\n    const prompt = document.getElementById('combined-prompt').value.trim();\n    if (!prompt) {\n      this.showError('Please enter a prompt');\n      return;\n    }\n\n    if (this.isGenerating || this.isSpeaking) return;\n\n    this.isGenerating = true;\n    const generateBtn = document.getElementById('generate-speak-btn');\n    const output = document.getElementById('combined-output');\n\n    generateBtn.textContent = 'Generating...';\n    generateBtn.disabled = true;\n    output.innerHTML = '';\n\n    try {\n      this.showProgress(true, 'Loading models...');\n      \n      // Generate text first\n      let generatedText = '';\n      await this.llm.generate(prompt, {\n        onToken: (token) => {\n          generatedText += token;\n          output.textContent = generatedText;\n          output.scrollTop = output.scrollHeight;\n        },\n        onProgress: (progress) => {\n          this.updateProgress(progress.percentage * 0.7, `Loading LLM: ${progress.text}`);\n        }\n      });\n\n      // Then speak it\n      this.isGenerating = false;\n      this.isSpeaking = true;\n      generateBtn.textContent = 'Speaking...';\n      \n      output.innerHTML = '';\n      await this.tts.speak(generatedText, {\n        outputElement: output,\n        audioModule: this.audio,\n        onProgress: (progress) => {\n          this.updateProgress(70 + progress.percentage * 0.3, `Loading TTS: ${progress.text}`);\n        }\n      });\n\n      document.getElementById('llm-status').textContent = 'loaded';\n      document.getElementById('tts-status').textContent = 'loaded';\n\n    } catch (error) {\n      this.showError(`Generation/Speech failed: ${error.message}`);\n      console.error('Combined error:', error);\n    } finally {\n      this.isGenerating = false;\n      this.isSpeaking = false;\n      generateBtn.textContent = 'Generate & Speak';\n      generateBtn.disabled = false;\n      this.showProgress(false);\n    }\n  }\n\n  updateTTSControls() {\n    // Update button states based on speaking status\n    // This would be more complex in a real implementation\n  }\n\n  showError(message) {\n    const errorContainer = document.getElementById('error-container');\n    const errorMessage = document.getElementById('error-message');\n    \n    errorMessage.textContent = message;\n    errorContainer.classList.remove('hidden');\n    \n    setTimeout(() => {\n      errorContainer.classList.add('hidden');\n    }, 5000);\n  }\n}\n\n// Initialize app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.app = new AppController();\n});\n"
    },
    "src/audio.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "258",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 9
            },
            "start": {
              "column": 17,
              "line": 2
            }
          }
        },
        {
          "id": "259",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 6
            },
            "start": {
              "column": 26,
              "line": 6
            }
          }
        },
        {
          "id": "260",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 7
            },
            "start": {
              "column": 21,
              "line": 7
            }
          }
        },
        {
          "id": "261",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 8
            },
            "start": {
              "column": 18,
              "line": 8
            }
          }
        },
        {
          "id": "262",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 52
            },
            "start": {
              "column": 22,
              "line": 11
            }
          }
        },
        {
          "id": "263",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "264",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "265",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 48
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "266",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 16
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        },
        {
          "id": "267",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 16
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        },
        {
          "id": "268",
          "mutatorName": "LogicalOperator",
          "replacement": "window.AudioContext && window.webkitAudioContext",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 80,
              "line": 16
            },
            "start": {
              "column": 32,
              "line": 16
            }
          }
        },
        {
          "id": "269",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 18
            },
            "start": {
              "column": 82,
              "line": 16
            }
          }
        },
        {
          "id": "270",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 21
            },
            "start": {
              "column": 54,
              "line": 21
            }
          }
        },
        {
          "id": "271",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 87,
              "line": 24
            },
            "start": {
              "column": 66,
              "line": 24
            }
          }
        },
        {
          "id": "272",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 44
            },
            "start": {
              "column": 52,
              "line": 30
            }
          }
        },
        {
          "id": "273",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'chunk-complete':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 36
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "274",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 34
            },
            "start": {
              "column": 16,
              "line": 34
            }
          }
        },
        {
          "id": "275",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 35
            },
            "start": {
              "column": 48,
              "line": 35
            }
          }
        },
        {
          "id": "276",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 35
            },
            "start": {
              "column": 66,
              "line": 35
            }
          }
        },
        {
          "id": "277",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'playback-ended':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 39
            },
            "start": {
              "column": 11,
              "line": 37
            }
          }
        },
        {
          "id": "278",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 37
            },
            "start": {
              "column": 16,
              "line": 37
            }
          }
        },
        {
          "id": "279",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 38
            },
            "start": {
              "column": 48,
              "line": 38
            }
          }
        },
        {
          "id": "280",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'buffer-underrun':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 42
            },
            "start": {
              "column": 11,
              "line": 40
            }
          }
        },
        {
          "id": "281",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 40
            },
            "start": {
              "column": 16,
              "line": 40
            }
          }
        },
        {
          "id": "282",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 41
            },
            "start": {
              "column": 48,
              "line": 41
            }
          }
        },
        {
          "id": "283",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 46
            },
            "start": {
              "column": 28,
              "line": 46
            }
          }
        },
        {
          "id": "284",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 51
            },
            "start": {
              "column": 21,
              "line": 48
            }
          }
        },
        {
          "id": "285",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 49
            },
            "start": {
              "column": 21,
              "line": 49
            }
          }
        },
        {
          "id": "286",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 50
            },
            "start": {
              "column": 23,
              "line": 50
            }
          }
        },
        {
          "id": "287",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 58
            },
            "start": {
              "column": 30,
              "line": 54
            }
          }
        },
        {
          "id": "288",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 55
            },
            "start": {
              "column": 9,
              "line": 55
            }
          }
        },
        {
          "id": "289",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 55
            },
            "start": {
              "column": 9,
              "line": 55
            }
          }
        },
        {
          "id": "290",
          "mutatorName": "LogicalOperator",
          "replacement": "this.audioContext || this.audioContext.state === 'suspended'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 55
            },
            "start": {
              "column": 9,
              "line": 55
            }
          }
        },
        {
          "id": "291",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 55
            },
            "start": {
              "column": 30,
              "line": 55
            }
          }
        },
        {
          "id": "292",
          "mutatorName": "EqualityOperator",
          "replacement": "this.audioContext.state !== 'suspended'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 55
            },
            "start": {
              "column": 30,
              "line": 55
            }
          }
        },
        {
          "id": "293",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 55
            },
            "start": {
              "column": 58,
              "line": 55
            }
          }
        },
        {
          "id": "294",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 57
            },
            "start": {
              "column": 71,
              "line": 55
            }
          }
        },
        {
          "id": "295",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 75
            },
            "start": {
              "column": 46,
              "line": 60
            }
          }
        },
        {
          "id": "296",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 64
            },
            "start": {
              "column": 9,
              "line": 64
            }
          }
        },
        {
          "id": "297",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 64
            },
            "start": {
              "column": 9,
              "line": 64
            }
          }
        },
        {
          "id": "298",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 68
            },
            "start": {
              "column": 24,
              "line": 64
            }
          }
        },
        {
          "id": "299",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 66
            },
            "start": {
              "column": 23,
              "line": 66
            }
          }
        },
        {
          "id": "300",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 74
            },
            "start": {
              "column": 39,
              "line": 70
            }
          }
        },
        {
          "id": "301",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 71
            },
            "start": {
              "column": 13,
              "line": 71
            }
          }
        },
        {
          "id": "302",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 85
            },
            "start": {
              "column": 17,
              "line": 77
            }
          }
        },
        {
          "id": "303",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 78
            },
            "start": {
              "column": 21,
              "line": 78
            }
          }
        },
        {
          "id": "304",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 80
            },
            "start": {
              "column": 9,
              "line": 80
            }
          }
        },
        {
          "id": "305",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 80
            },
            "start": {
              "column": 9,
              "line": 80
            }
          }
        },
        {
          "id": "306",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 84
            },
            "start": {
              "column": 27,
              "line": 80
            }
          }
        },
        {
          "id": "307",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 83
            },
            "start": {
              "column": 41,
              "line": 81
            }
          }
        },
        {
          "id": "308",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 82
            },
            "start": {
              "column": 15,
              "line": 82
            }
          }
        },
        {
          "id": "309",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 108
            },
            "start": {
              "column": 18,
              "line": 87
            }
          }
        },
        {
          "id": "310",
          "mutatorName": "BooleanLiteral",
          "replacement": "this.isPaused",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 88
            },
            "start": {
              "column": 9,
              "line": 88
            }
          }
        },
        {
          "id": "311",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 88
            },
            "start": {
              "column": 9,
              "line": 88
            }
          }
        },
        {
          "id": "312",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 88
            },
            "start": {
              "column": 9,
              "line": 88
            }
          }
        },
        {
          "id": "313",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 90
            },
            "start": {
              "column": 21,
              "line": 90
            }
          }
        },
        {
          "id": "314",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 94
            },
            "start": {
              "column": 12,
              "line": 94
            }
          }
        },
        {
          "id": "315",
          "mutatorName": "EqualityOperator",
          "replacement": "this.queue.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 94
            },
            "start": {
              "column": 12,
              "line": 94
            }
          }
        },
        {
          "id": "316",
          "mutatorName": "EqualityOperator",
          "replacement": "this.queue.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 94
            },
            "start": {
              "column": 12,
              "line": 94
            }
          }
        },
        {
          "id": "317",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 101
            },
            "start": {
              "column": 35,
              "line": 94
            }
          }
        },
        {
          "id": "318",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 100
            },
            "start": {
              "column": 41,
              "line": 96
            }
          }
        },
        {
          "id": "319",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 97
            },
            "start": {
              "column": 15,
              "line": 97
            }
          }
        },
        {
          "id": "320",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 103
            },
            "start": {
              "column": 9,
              "line": 103
            }
          }
        },
        {
          "id": "321",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 103
            },
            "start": {
              "column": 9,
              "line": 103
            }
          }
        },
        {
          "id": "322",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 107
            },
            "start": {
              "column": 27,
              "line": 103
            }
          }
        },
        {
          "id": "323",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 106
            },
            "start": {
              "column": 41,
              "line": 104
            }
          }
        },
        {
          "id": "324",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 105
            },
            "start": {
              "column": 15,
              "line": 105
            }
          }
        },
        {
          "id": "325",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 119
            },
            "start": {
              "column": 10,
              "line": 110
            }
          }
        },
        {
          "id": "326",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 111
            },
            "start": {
              "column": 21,
              "line": 111
            }
          }
        },
        {
          "id": "327",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 112
            },
            "start": {
              "column": 18,
              "line": 112
            }
          }
        },
        {
          "id": "328",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 114
            },
            "start": {
              "column": 9,
              "line": 114
            }
          }
        },
        {
          "id": "329",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 114
            },
            "start": {
              "column": 9,
              "line": 114
            }
          }
        },
        {
          "id": "330",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 118
            },
            "start": {
              "column": 27,
              "line": 114
            }
          }
        },
        {
          "id": "331",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 117
            },
            "start": {
              "column": 41,
              "line": 115
            }
          }
        },
        {
          "id": "332",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 21,
              "line": 116
            },
            "start": {
              "column": 15,
              "line": 116
            }
          }
        },
        {
          "id": "333",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 127
            },
            "start": {
              "column": 21,
              "line": 121
            }
          }
        },
        {
          "id": "334",
          "mutatorName": "BooleanLiteral",
          "replacement": "this.workletNode",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "335",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "336",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "337",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 122
            },
            "start": {
              "column": 35,
              "line": 122
            }
          }
        },
        {
          "id": "338",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 126
            },
            "start": {
              "column": 12,
              "line": 126
            }
          }
        },
        {
          "id": "339",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 143
            },
            "start": {
              "column": 13,
              "line": 129
            }
          }
        },
        {
          "id": "340",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 132
            },
            "start": {
              "column": 9,
              "line": 132
            }
          }
        },
        {
          "id": "341",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 132
            },
            "start": {
              "column": 9,
              "line": 132
            }
          }
        },
        {
          "id": "342",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 135
            },
            "start": {
              "column": 27,
              "line": 132
            }
          }
        },
        {
          "id": "343",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 137
            },
            "start": {
              "column": 9,
              "line": 137
            }
          }
        },
        {
          "id": "344",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 137
            },
            "start": {
              "column": 9,
              "line": 137
            }
          }
        },
        {
          "id": "345",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 140
            },
            "start": {
              "column": 28,
              "line": 137
            }
          }
        },
        {
          "id": "346",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 142
            },
            "start": {
              "column": 26,
              "line": 142
            }
          }
        }
      ],
      "source": "export class AudioModule extends EventTarget {\n  constructor() {\n    super();\n    this.audioContext = null;\n    this.workletNode = null;\n    this.isInitialized = false;\n    this.isPaused = false;\n    this.queue = [];\n  }\n\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      // Create AudioContext with appropriate sample rate for TTS\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 24000\n      });\n\n      // Load and register the AudioWorklet processor\n      await this.audioContext.audioWorklet.addModule('./src/worklet.js');\n\n      // Create the worklet node\n      this.workletNode = new AudioWorkletNode(this.audioContext, 'pcm-queue-processor');\n\n      // Connect to speakers\n      this.workletNode.connect(this.audioContext.destination);\n\n      // Set up message handling\n      this.workletNode.port.onmessage = (event) => {\n        const { type, data } = event.data;\n        \n        switch (type) {\n          case 'chunk-complete':\n            this.dispatchEvent(new CustomEvent('chunk-complete', { detail: data }));\n            break;\n          case 'playback-ended':\n            this.dispatchEvent(new CustomEvent('playback-ended'));\n            break;\n          case 'buffer-underrun':\n            this.dispatchEvent(new CustomEvent('buffer-underrun'));\n            break;\n        }\n      };\n\n      this.isInitialized = true;\n\n    } catch (error) {\n      console.error('Failed to initialize AudioModule:', error);\n      throw new Error(`Audio initialization failed: ${error.message}`);\n    }\n  }\n\n  async resumeAudioContext() {\n    if (this.audioContext && this.audioContext.state === 'suspended') {\n      await this.audioContext.resume();\n    }\n  }\n\n  async queueAudio(audioData, metadata = {}) {\n    await this.initialize();\n    await this.resumeAudioContext();\n\n    if (this.isPaused) {\n      // Queue for later playback\n      this.queue.push({ audioData, metadata });\n      return;\n    }\n\n    this.workletNode.port.postMessage({\n      type: 'queue-audio',\n      audioData: audioData,\n      metadata: metadata\n    });\n  }\n\n  async pause() {\n    this.isPaused = true;\n    \n    if (this.workletNode) {\n      this.workletNode.port.postMessage({\n        type: 'pause'\n      });\n    }\n  }\n\n  async resume() {\n    if (!this.isPaused) return;\n    \n    this.isPaused = false;\n    await this.resumeAudioContext();\n\n    // Process any queued audio\n    while (this.queue.length > 0) {\n      const { audioData, metadata } = this.queue.shift();\n      this.workletNode.port.postMessage({\n        type: 'queue-audio',\n        audioData: audioData,\n        metadata: metadata\n      });\n    }\n\n    if (this.workletNode) {\n      this.workletNode.port.postMessage({\n        type: 'resume'\n      });\n    }\n  }\n\n  stop() {\n    this.isPaused = false;\n    this.queue = [];\n    \n    if (this.workletNode) {\n      this.workletNode.port.postMessage({\n        type: 'stop'\n      });\n    }\n  }\n\n  getBufferStatus() {\n    if (!this.workletNode) return { length: 0, duration: 0 };\n    \n    // This would require the worklet to report back buffer status\n    // For now, return a placeholder\n    return { length: 0, duration: 0 };\n  }\n\n  destroy() {\n    this.stop();\n    \n    if (this.workletNode) {\n      this.workletNode.disconnect();\n      this.workletNode = null;\n    }\n    \n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    this.isInitialized = false;\n  }\n}\n"
    },
    "src/index.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "393",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 20
            },
            "start": {
              "column": 34,
              "line": 20
            }
          }
        },
        {
          "id": "391",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "static": false,
          "testsCompleted": 2,
          "coveredBy": [
            "41",
            "42"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 16
            },
            "start": {
              "column": 10,
              "line": 16
            }
          }
        },
        {
          "id": "390",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"boolean\"\nReceived: \"undefined\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/index.test.js:48:27)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "41"
          ],
          "coveredBy": [
            "41",
            "42"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 17
            },
            "start": {
              "column": 39,
              "line": 15
            }
          }
        },
        {
          "id": "392",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nExpected value: undefined\nReceived array: [\"webgpu\", \"wasm\"]\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/index.test.js:53:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "42"
          ],
          "coveredBy": [
            "42"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        },
        {
          "id": "394",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nExpected value: \"\"\nReceived array: [\"webgpu\", \"wasm\"]\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/index.test.js:53:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "42"
          ],
          "coveredBy": [
            "42"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 20
            },
            "start": {
              "column": 45,
              "line": 20
            }
          }
        },
        {
          "id": "387",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at Object.toBeDefined (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/index.test.js:12:33)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": true,
          "testsCompleted": 6,
          "killedBy": [
            "37"
          ],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 23,
              "line": 2
            }
          }
        },
        {
          "id": "388",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "static": true,
          "testsCompleted": 6,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 3
            },
            "start": {
              "column": 17,
              "line": 3
            }
          }
        },
        {
          "id": "389",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "static": true,
          "testsCompleted": 6,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 4
            },
            "start": {
              "column": 17,
              "line": 4
            }
          }
        },
        {
          "id": "395",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "static": true,
          "testsCompleted": 6,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 23
            },
            "start": {
              "column": 13,
              "line": 23
            }
          }
        }
      ],
      "source": "// Configuration constants for the Local LLM Demo\nexport const CONFIG = {\n  LLM_MODEL_ID: 'onnx-community/Qwen2.5-0.5B-Instruct-ONNX',\n  TTS_MODEL_ID: 'onnx-community/Kokoro-82M-v1.0-ONNX',\n  SAMPLE_RATE: 24000,\n  MAX_NEW_TOKENS: 256,\n  TEMPERATURE: 0.8,\n  TOP_P: 0.95\n};\n\nimport { splitIntoSentences, formatPromptForInstruction } from './utils/text-processing.js';\n\nexport { splitIntoSentences, formatPromptForInstruction };\n\nexport function detectWebGPUSupport() {\n  return 'gpu' in navigator;\n}\n\nexport function getOptimalDevice() {\n  return detectWebGPUSupport() ? 'webgpu' : 'wasm';\n}\n\nconsole.log(\"Local LLM Demo initialized\");\n"
    },
    "src/llm.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "396",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 2
            },
            "start": {
              "column": 22,
              "line": 2
            }
          }
        },
        {
          "id": "397",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 10
            },
            "start": {
              "column": 17,
              "line": 5
            }
          }
        },
        {
          "id": "398",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 8
            },
            "start": {
              "column": 22,
              "line": 8
            }
          }
        },
        {
          "id": "399",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 22,
              "line": 12
            }
          }
        },
        {
          "id": "400",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "401",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "402",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof window !== 'undefined' || window.transformers",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "403",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "404",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof window === 'undefined'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "405",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 14
            },
            "start": {
              "column": 27,
              "line": 14
            }
          }
        },
        {
          "id": "406",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 26
            },
            "start": {
              "column": 63,
              "line": 14
            }
          }
        },
        {
          "id": "407",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 18
            },
            "start": {
              "column": 29,
              "line": 18
            }
          }
        },
        {
          "id": "408",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 21
            },
            "start": {
              "column": 31,
              "line": 21
            }
          }
        },
        {
          "id": "409",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 22
            },
            "start": {
              "column": 30,
              "line": 22
            }
          }
        },
        {
          "id": "410",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 25
            },
            "start": {
              "column": 43,
              "line": 25
            }
          }
        },
        {
          "id": "411",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 25
            },
            "start": {
              "column": 43,
              "line": 25
            }
          }
        },
        {
          "id": "412",
          "mutatorName": "LogicalOperator",
          "replacement": "navigator.hardwareConcurrency && 4",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 25
            },
            "start": {
              "column": 43,
              "line": 25
            }
          }
        },
        {
          "id": "413",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 42
            },
            "start": {
              "column": 24,
              "line": 29
            }
          }
        },
        {
          "id": "414",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 31
            },
            "start": {
              "column": 9,
              "line": 31
            }
          }
        },
        {
          "id": "415",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 31
            },
            "start": {
              "column": 9,
              "line": 31
            }
          }
        },
        {
          "id": "416",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 40
            },
            "start": {
              "column": 24,
              "line": 31
            }
          }
        },
        {
          "id": "417",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 37
            },
            "start": {
              "column": 11,
              "line": 32
            }
          }
        },
        {
          "id": "418",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 34
            },
            "start": {
              "column": 13,
              "line": 34
            }
          }
        },
        {
          "id": "419",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 34
            },
            "start": {
              "column": 13,
              "line": 34
            }
          }
        },
        {
          "id": "420",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 36
            },
            "start": {
              "column": 22,
              "line": 34
            }
          }
        },
        {
          "id": "421",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 35
            },
            "start": {
              "column": 18,
              "line": 35
            }
          }
        },
        {
          "id": "422",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 39
            },
            "start": {
              "column": 15,
              "line": 37
            }
          }
        },
        {
          "id": "423",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 38
            },
            "start": {
              "column": 22,
              "line": 38
            }
          }
        },
        {
          "id": "424",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 41
            },
            "start": {
              "column": 12,
              "line": 41
            }
          }
        },
        {
          "id": "425",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 101
            },
            "start": {
              "column": 40,
              "line": 44
            }
          }
        },
        {
          "id": "426",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 45
            },
            "start": {
              "column": 9,
              "line": 45
            }
          }
        },
        {
          "id": "427",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 45
            },
            "start": {
              "column": 9,
              "line": 45
            }
          }
        },
        {
          "id": "428",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 46
            },
            "start": {
              "column": 9,
              "line": 46
            }
          }
        },
        {
          "id": "429",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 46
            },
            "start": {
              "column": 9,
              "line": 46
            }
          }
        },
        {
          "id": "430",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 52
            },
            "start": {
              "column": 25,
              "line": 46
            }
          }
        },
        {
          "id": "431",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 48
            },
            "start": {
              "column": 14,
              "line": 48
            }
          }
        },
        {
          "id": "432",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 50
            },
            "start": {
              "column": 30,
              "line": 48
            }
          }
        },
        {
          "id": "433",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 49
            },
            "start": {
              "column": 27,
              "line": 49
            }
          }
        },
        {
          "id": "434",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 54
            },
            "start": {
              "column": 22,
              "line": 54
            }
          }
        },
        {
          "id": "435",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 95
            },
            "start": {
              "column": 9,
              "line": 56
            }
          }
        },
        {
          "id": "436",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 62
            },
            "start": {
              "column": 11,
              "line": 59
            }
          }
        },
        {
          "id": "437",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 120,
              "line": 61
            },
            "start": {
              "column": 37,
              "line": 61
            }
          }
        },
        {
          "id": "438",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 65
            },
            "start": {
              "column": 15,
              "line": 62
            }
          }
        },
        {
          "id": "439",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 64
            },
            "start": {
              "column": 25,
              "line": 64
            }
          }
        },
        {
          "id": "440",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 70
            },
            "start": {
              "column": 29,
              "line": 70
            }
          }
        },
        {
          "id": "441",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 71
            },
            "start": {
              "column": 31,
              "line": 71
            }
          }
        },
        {
          "id": "442",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 72
            },
            "start": {
              "column": 30,
              "line": 72
            }
          }
        },
        {
          "id": "443",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 73
            },
            "start": {
              "column": 43,
              "line": 73
            }
          }
        },
        {
          "id": "444",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 73
            },
            "start": {
              "column": 43,
              "line": 73
            }
          }
        },
        {
          "id": "445",
          "mutatorName": "LogicalOperator",
          "replacement": "navigator.hardwareConcurrency && 4",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 73
            },
            "start": {
              "column": 43,
              "line": 73
            }
          }
        },
        {
          "id": "446",
          "mutatorName": "OptionalChaining",
          "replacement": "onProgress({\n  percentage: 0,\n  text: 'Initializing pipeline...'\n})",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 79
            },
            "start": {
              "column": 7,
              "line": 79
            }
          }
        },
        {
          "id": "447",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 79
            },
            "start": {
              "column": 20,
              "line": 79
            }
          }
        },
        {
          "id": "448",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 79
            },
            "start": {
              "column": 43,
              "line": 79
            }
          }
        },
        {
          "id": "449",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 81
            },
            "start": {
              "column": 38,
              "line": 81
            }
          }
        },
        {
          "id": "450",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 90
            },
            "start": {
              "column": 71,
              "line": 81
            }
          }
        },
        {
          "id": "451",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 89
            },
            "start": {
              "column": 42,
              "line": 83
            }
          }
        },
        {
          "id": "452",
          "mutatorName": "ArithmeticOperator",
          "replacement": "progress.loaded / progress.total / 100",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 84
            },
            "start": {
              "column": 41,
              "line": 84
            }
          }
        },
        {
          "id": "453",
          "mutatorName": "ArithmeticOperator",
          "replacement": "progress.loaded * progress.total",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 84
            },
            "start": {
              "column": 42,
              "line": 84
            }
          }
        },
        {
          "id": "454",
          "mutatorName": "OptionalChaining",
          "replacement": "onProgress({\n  percentage,\n  text: `Loading ${progress.file || 'model'}: ${percentage}%`\n})",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 13,
              "line": 88
            },
            "start": {
              "column": 11,
              "line": 85
            }
          }
        },
        {
          "id": "455",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 88
            },
            "start": {
              "column": 24,
              "line": 85
            }
          }
        },
        {
          "id": "456",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 87
            },
            "start": {
              "column": 19,
              "line": 87
            }
          }
        },
        {
          "id": "457",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 87
            },
            "start": {
              "column": 30,
              "line": 87
            }
          }
        },
        {
          "id": "458",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 87
            },
            "start": {
              "column": 30,
              "line": 87
            }
          }
        },
        {
          "id": "459",
          "mutatorName": "LogicalOperator",
          "replacement": "progress.file && 'model'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 87
            },
            "start": {
              "column": 30,
              "line": 87
            }
          }
        },
        {
          "id": "460",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 87
            },
            "start": {
              "column": 47,
              "line": 87
            }
          }
        },
        {
          "id": "461",
          "mutatorName": "OptionalChaining",
          "replacement": "onProgress({\n  percentage: 100,\n  text: 'Model loaded successfully'\n})",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 92
            },
            "start": {
              "column": 7,
              "line": 92
            }
          }
        },
        {
          "id": "462",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 92
            },
            "start": {
              "column": 20,
              "line": 92
            }
          }
        },
        {
          "id": "463",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 92
            },
            "start": {
              "column": 45,
              "line": 92
            }
          }
        },
        {
          "id": "464",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 98
            },
            "start": {
              "column": 21,
              "line": 95
            }
          }
        },
        {
          "id": "465",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 96
            },
            "start": {
              "column": 21,
              "line": 96
            }
          }
        },
        {
          "id": "466",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 97
            },
            "start": {
              "column": 23,
              "line": 97
            }
          }
        },
        {
          "id": "467",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 100
            },
            "start": {
              "column": 15,
              "line": 98
            }
          }
        },
        {
          "id": "468",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 99
            },
            "start": {
              "column": 24,
              "line": 99
            }
          }
        },
        {
          "id": "469",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 141
            },
            "start": {
              "column": 40,
              "line": 103
            }
          }
        },
        {
          "id": "470",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 110
            },
            "start": {
              "column": 18,
              "line": 110
            }
          }
        },
        {
          "id": "471",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 137
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "472",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 128
            },
            "start": {
              "column": 57,
              "line": 121
            }
          }
        },
        {
          "id": "473",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 126
            },
            "start": {
              "column": 27,
              "line": 126
            }
          }
        },
        {
          "id": "474",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 131
            },
            "start": {
              "column": 11,
              "line": 131
            }
          }
        },
        {
          "id": "475",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 131
            },
            "start": {
              "column": 11,
              "line": 131
            }
          }
        },
        {
          "id": "476",
          "mutatorName": "LogicalOperator",
          "replacement": "generator || typeof generator[Symbol.asyncIterator] === 'function'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 131
            },
            "start": {
              "column": 11,
              "line": 131
            }
          }
        },
        {
          "id": "477",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 131
            },
            "start": {
              "column": 24,
              "line": 131
            }
          }
        },
        {
          "id": "478",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof generator[Symbol.asyncIterator] !== 'function'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 131
            },
            "start": {
              "column": 24,
              "line": 131
            }
          }
        },
        {
          "id": "479",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 131
            },
            "start": {
              "column": 67,
              "line": 131
            }
          }
        },
        {
          "id": "480",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 133
            },
            "start": {
              "column": 79,
              "line": 131
            }
          }
        },
        {
          "id": "481",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 140
            },
            "start": {
              "column": 21,
              "line": 137
            }
          }
        },
        {
          "id": "482",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 138
            },
            "start": {
              "column": 21,
              "line": 138
            }
          }
        },
        {
          "id": "483",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 139
            },
            "start": {
              "column": 23,
              "line": 139
            }
          }
        },
        {
          "id": "484",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 153
            },
            "start": {
              "column": 55,
              "line": 143
            }
          }
        },
        {
          "id": "485",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 144
            },
            "start": {
              "column": 20,
              "line": 144
            }
          }
        },
        {
          "id": "486",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 151
            },
            "start": {
              "column": 42,
              "line": 145
            }
          }
        },
        {
          "id": "487",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 147
            },
            "start": {
              "column": 11,
              "line": 147
            }
          }
        },
        {
          "id": "488",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 147
            },
            "start": {
              "column": 11,
              "line": 147
            }
          }
        },
        {
          "id": "489",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 150
            },
            "start": {
              "column": 18,
              "line": 147
            }
          }
        },
        {
          "id": "490",
          "mutatorName": "AssignmentOperator",
          "replacement": "fullText -= token",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 148
            },
            "start": {
              "column": 9,
              "line": 148
            }
          }
        },
        {
          "id": "491",
          "mutatorName": "OptionalChaining",
          "replacement": "onToken(token)",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 149
            },
            "start": {
              "column": 9,
              "line": 149
            }
          }
        },
        {
          "id": "492",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 169
            },
            "start": {
              "column": 55,
              "line": 155
            }
          }
        },
        {
          "id": "493",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 157
            },
            "start": {
              "column": 18,
              "line": 157
            }
          }
        },
        {
          "id": "494",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 157
            },
            "start": {
              "column": 18,
              "line": 157
            }
          }
        },
        {
          "id": "495",
          "mutatorName": "LogicalOperator",
          "replacement": "(result?.generated_text || result?.text) && ''",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 157
            },
            "start": {
              "column": 18,
              "line": 157
            }
          }
        },
        {
          "id": "496",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 157
            },
            "start": {
              "column": 18,
              "line": 157
            }
          }
        },
        {
          "id": "497",
          "mutatorName": "LogicalOperator",
          "replacement": "result?.generated_text && result?.text",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 157
            },
            "start": {
              "column": 18,
              "line": 157
            }
          }
        },
        {
          "id": "498",
          "mutatorName": "OptionalChaining",
          "replacement": "result.generated_text",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 157
            },
            "start": {
              "column": 18,
              "line": 157
            }
          }
        },
        {
          "id": "499",
          "mutatorName": "OptionalChaining",
          "replacement": "result.text",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 157
            },
            "start": {
              "column": 44,
              "line": 157
            }
          }
        },
        {
          "id": "500",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 157
            },
            "start": {
              "column": 60,
              "line": 157
            }
          }
        },
        {
          "id": "501",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 160
            },
            "start": {
              "column": 9,
              "line": 160
            }
          }
        },
        {
          "id": "502",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 160
            },
            "start": {
              "column": 9,
              "line": 160
            }
          }
        },
        {
          "id": "503",
          "mutatorName": "LogicalOperator",
          "replacement": "onToken || text",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 160
            },
            "start": {
              "column": 9,
              "line": 160
            }
          }
        },
        {
          "id": "504",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 166
            },
            "start": {
              "column": 26,
              "line": 160
            }
          }
        },
        {
          "id": "505",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 165
            },
            "start": {
              "column": 35,
              "line": 162
            }
          }
        },
        {
          "id": "506",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 164
            },
            "start": {
              "column": 27,
              "line": 164
            }
          }
        },
        {
          "id": "507",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 179
            },
            "start": {
              "column": 24,
              "line": 171
            }
          }
        },
        {
          "id": "508",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 178
            },
            "start": {
              "column": 12,
              "line": 173
            }
          }
        },
        {
          "id": "509",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 193
            },
            "start": {
              "column": 23,
              "line": 181
            }
          }
        },
        {
          "id": "510",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 183
            },
            "start": {
              "column": 9,
              "line": 183
            }
          }
        },
        {
          "id": "511",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 183
            },
            "start": {
              "column": 9,
              "line": 183
            }
          }
        },
        {
          "id": "512",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof chunk !== 'string'",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 183
            },
            "start": {
              "column": 9,
              "line": 183
            }
          }
        },
        {
          "id": "513",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 183
            },
            "start": {
              "column": 26,
              "line": 183
            }
          }
        },
        {
          "id": "514",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 185
            },
            "start": {
              "column": 36,
              "line": 183
            }
          }
        },
        {
          "id": "515",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 186
            },
            "start": {
              "column": 9,
              "line": 186
            }
          }
        },
        {
          "id": "516",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 186
            },
            "start": {
              "column": 9,
              "line": 186
            }
          }
        },
        {
          "id": "517",
          "mutatorName": "LogicalOperator",
          "replacement": "chunk || chunk.token",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 186
            },
            "start": {
              "column": 9,
              "line": 186
            }
          }
        },
        {
          "id": "518",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 188
            },
            "start": {
              "column": 31,
              "line": 186
            }
          }
        },
        {
          "id": "519",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 187
            },
            "start": {
              "column": 14,
              "line": 187
            }
          }
        },
        {
          "id": "520",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 187
            },
            "start": {
              "column": 14,
              "line": 187
            }
          }
        },
        {
          "id": "521",
          "mutatorName": "LogicalOperator",
          "replacement": "chunk.token.text && chunk.token",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 187
            },
            "start": {
              "column": 14,
              "line": 187
            }
          }
        },
        {
          "id": "522",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 189
            },
            "start": {
              "column": 9,
              "line": 189
            }
          }
        },
        {
          "id": "523",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 189
            },
            "start": {
              "column": 9,
              "line": 189
            }
          }
        },
        {
          "id": "524",
          "mutatorName": "LogicalOperator",
          "replacement": "chunk || chunk.generated_text",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 189
            },
            "start": {
              "column": 9,
              "line": 189
            }
          }
        },
        {
          "id": "525",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 191
            },
            "start": {
              "column": 40,
              "line": 189
            }
          }
        },
        {
          "id": "526",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 14,
              "line": 192
            },
            "start": {
              "column": 12,
              "line": 192
            }
          }
        },
        {
          "id": "527",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 208
            },
            "start": {
              "column": 28,
              "line": 195
            }
          }
        },
        {
          "id": "528",
          "mutatorName": "Regex",
          "replacement": "/(\\s)/",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 198
            },
            "start": {
              "column": 30,
              "line": 198
            }
          }
        },
        {
          "id": "529",
          "mutatorName": "Regex",
          "replacement": "/(\\S+)/",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 198
            },
            "start": {
              "column": 30,
              "line": 198
            }
          }
        },
        {
          "id": "530",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 199
            },
            "start": {
              "column": 20,
              "line": 199
            }
          }
        },
        {
          "id": "531",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 205
            },
            "start": {
              "column": 31,
              "line": 201
            }
          }
        },
        {
          "id": "532",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 202
            },
            "start": {
              "column": 11,
              "line": 202
            }
          }
        },
        {
          "id": "533",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 202
            },
            "start": {
              "column": 11,
              "line": 202
            }
          }
        },
        {
          "id": "534",
          "mutatorName": "EqualityOperator",
          "replacement": "word.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 202
            },
            "start": {
              "column": 11,
              "line": 202
            }
          }
        },
        {
          "id": "535",
          "mutatorName": "EqualityOperator",
          "replacement": "word.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 202
            },
            "start": {
              "column": 11,
              "line": 202
            }
          }
        },
        {
          "id": "536",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 204
            },
            "start": {
              "column": 28,
              "line": 202
            }
          }
        },
        {
          "id": "537",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 212
            },
            "start": {
              "column": 15,
              "line": 210
            }
          }
        },
        {
          "id": "538",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 216
            },
            "start": {
              "column": 16,
              "line": 214
            }
          }
        },
        {
          "id": "539",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 220
            },
            "start": {
              "column": 19,
              "line": 218
            }
          }
        },
        {
          "id": "540",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 219
            },
            "start": {
              "column": 12,
              "line": 219
            }
          }
        },
        {
          "id": "541",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 219
            },
            "start": {
              "column": 12,
              "line": 219
            }
          }
        },
        {
          "id": "542",
          "mutatorName": "EqualityOperator",
          "replacement": "this.pipeline === null",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 219
            },
            "start": {
              "column": 12,
              "line": 219
            }
          }
        }
      ],
      "source": "// Configuration\nconst LLM_MODEL_ID = 'onnx-community/Qwen2.5-0.5B-Instruct-ONNX';\n\nexport class LLMModule {\n  constructor() {\n    this.pipeline = null;\n    this.device = null;\n    this.isLoading = false;\n    this.setupEnvironment();\n  }\n\n  setupEnvironment() {\n    // Configure Transformers.js environment\n    if (typeof window !== 'undefined' && window.transformers) {\n      const { env } = window.transformers;\n      \n      // Enable browser caching for offline use\n      env.useBrowserCache = true;\n      \n      // Allow local models when serving from local server\n      env.allowRemoteModels = true;\n      env.allowLocalModels = true;\n      \n      // Optimize ONNX WASM performance\n      env.backends.onnx.wasm.numThreads = navigator.hardwareConcurrency || 4;\n    }\n  }\n\n  async detectDevice() {\n    // Check WebGPU availability\n    if (navigator.gpu) {\n      try {\n        const adapter = await navigator.gpu.requestAdapter();\n        if (adapter) {\n          return 'webgpu';\n        }\n      } catch {\n        console.warn('WebGPU adapter request failed');\n      }\n    }\n    return 'wasm';\n  }\n\n  async initializePipeline(onProgress) {\n    if (this.pipeline) return this.pipeline;\n    if (this.isLoading) {\n      // Wait for current loading to complete\n      while (this.isLoading) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      return this.pipeline;\n    }\n\n    this.isLoading = true;\n\n    try {\n      // Dynamically import Transformers.js\n      let transformers;\n      try {\n        // Try to load from CDN\n        transformers = await import('https://cdn.jsdelivr.net/npm/@xenova/transformers@2.17.2/dist/transformers.min.js');\n      } catch {\n        // Fallback error handling\n        throw new Error('Failed to load Transformers.js library');\n      }\n\n      const { pipeline, env } = transformers;\n      \n      // Configure environment\n      env.useBrowserCache = true;\n      env.allowRemoteModels = true;\n      env.allowLocalModels = true;\n      env.backends.onnx.wasm.numThreads = navigator.hardwareConcurrency || 4;\n\n      // Detect device\n      this.device = await this.detectDevice();\n      \n      // Create pipeline with progress callback\n      onProgress?.({ percentage: 0, text: 'Initializing pipeline...' });\n      \n      this.pipeline = await pipeline('text-generation', LLM_MODEL_ID, {\n        device: this.device,\n        progress_callback: (progress) => {\n          const percentage = Math.round((progress.loaded / progress.total) * 100);\n          onProgress?.({ \n            percentage, \n            text: `Loading ${progress.file || 'model'}: ${percentage}%` \n          });\n        }\n      });\n\n      onProgress?.({ percentage: 100, text: 'Model loaded successfully' });\n      return this.pipeline;\n\n    } catch (error) {\n      console.error('Failed to initialize LLM pipeline:', error);\n      throw new Error(`Failed to load LLM model: ${error.message}`);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async generate(prompt, options = {}) {\n    const {\n      onToken,\n      onProgress,\n      maxNewTokens = 256,\n      temperature = 0.8,\n      topP = 0.95,\n      doSample = true\n    } = options;\n\n    try {\n      // Ensure pipeline is initialized\n      const pipeline = await this.initializePipeline(onProgress);\n\n      // Format prompt for instruction-tuned model\n      const formattedPrompt = this.formatPrompt(prompt);\n\n      // Generate with streaming-enabled pipeline\n      const generator = await pipeline(formattedPrompt, {\n        max_new_tokens: maxNewTokens,\n        temperature: temperature,\n        top_p: topP,\n        do_sample: doSample,\n        return_full_text: false,\n        streamer_callback: onToken\n      });\n\n      // Delegate handling to helpers for clarity (streaming vs non-streaming)\n      if (generator && typeof generator[Symbol.asyncIterator] === 'function') {\n        return await this._handleStreamingGenerator(generator, onToken);\n      }\n\n      return await this._handleNonStreamingResult(generator, onToken);\n\n    } catch (error) {\n      console.error('Generation failed:', error);\n      throw new Error(`Text generation failed: ${error.message}`);\n    }\n  }\n\n  async _handleStreamingGenerator(generator, onToken) {\n    let fullText = '';\n    for await (const chunk of generator) {\n      const token = this.extractToken(chunk);\n      if (token) {\n        fullText += token;\n        onToken?.(token);\n      }\n    }\n    return fullText;\n  }\n\n  async _handleNonStreamingResult(generator, onToken) {\n    const result = Array.isArray(generator) ? generator[0] : generator;\n    const text = result?.generated_text || result?.text || '';\n\n    // Simulate streaming for consistency\n    if (onToken && text) {\n      const tokens = this.tokenizeForDisplay(text);\n      for (const token of tokens) {\n        onToken(token);\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n    }\n\n    return text;\n  }\n\n  formatPrompt(prompt) {\n    // Format for instruction-tuned models (Qwen2.5 format)\n    return `<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\n${prompt}<|im_end|>\n<|im_start|>assistant\n`;\n  }\n\n  extractToken(chunk) {\n    // Extract token from different possible chunk formats\n    if (typeof chunk === 'string') {\n      return chunk;\n    }\n    if (chunk && chunk.token) {\n      return chunk.token.text || chunk.token;\n    }\n    if (chunk && chunk.generated_text) {\n      return chunk.generated_text;\n    }\n    return '';\n  }\n\n  tokenizeForDisplay(text) {\n    // Simple tokenization for display purposes\n    // In a real implementation, this could use the model's actual tokenizer\n    const words = text.split(/(\\s+)/);\n    const tokens = [];\n    \n    for (const word of words) {\n      if (word.length > 0) {\n        tokens.push(word);\n      }\n    }\n    \n    return tokens;\n  }\n\n  getDevice() {\n    return this.device;\n  }\n\n  getModelId() {\n    return LLM_MODEL_ID;\n  }\n\n  isInitialized() {\n    return this.pipeline !== null;\n  }\n}\n"
    },
    "src/tts.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "543",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 2
            },
            "start": {
              "column": 32,
              "line": 2
            }
          }
        },
        {
          "id": "544",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 17,
              "line": 5
            }
          }
        },
        {
          "id": "545",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 7
            },
            "start": {
              "column": 25,
              "line": 7
            }
          }
        },
        {
          "id": "546",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 8
            },
            "start": {
              "column": 22,
              "line": 8
            }
          }
        },
        {
          "id": "547",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 10
            },
            "start": {
              "column": 22,
              "line": 10
            }
          }
        },
        {
          "id": "548",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 12
            },
            "start": {
              "column": 21,
              "line": 12
            }
          }
        },
        {
          "id": "549",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 13
            },
            "start": {
              "column": 22,
              "line": 13
            }
          }
        },
        {
          "id": "550",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 25,
              "line": 23
            }
          }
        },
        {
          "id": "551",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "552",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "553",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "554",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 32
            },
            "start": {
              "column": 38,
              "line": 24
            }
          }
        },
        {
          "id": "555",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 29
            },
            "start": {
              "column": 40,
              "line": 29
            }
          }
        },
        {
          "id": "556",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 31
            },
            "start": {
              "column": 63,
              "line": 29
            }
          }
        },
        {
          "id": "557",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 57
            },
            "start": {
              "column": 16,
              "line": 35
            }
          }
        },
        {
          "id": "558",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 37
            },
            "start": {
              "column": 49,
              "line": 37
            }
          }
        },
        {
          "id": "559",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 9,
              "line": 39
            }
          }
        },
        {
          "id": "560",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 9,
              "line": 39
            }
          }
        },
        {
          "id": "561",
          "mutatorName": "LogicalOperator",
          "replacement": "voiceSelect || voices.length > 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 9,
              "line": 39
            }
          }
        },
        {
          "id": "562",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 24,
              "line": 39
            }
          }
        },
        {
          "id": "563",
          "mutatorName": "EqualityOperator",
          "replacement": "voices.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 24,
              "line": 39
            }
          }
        },
        {
          "id": "564",
          "mutatorName": "EqualityOperator",
          "replacement": "voices.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 39
            },
            "start": {
              "column": 24,
              "line": 39
            }
          }
        },
        {
          "id": "565",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 56
            },
            "start": {
              "column": 43,
              "line": 39
            }
          }
        },
        {
          "id": "566",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 40
            },
            "start": {
              "column": 31,
              "line": 40
            }
          }
        },
        {
          "id": "567",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 51
            },
            "start": {
              "column": 40,
              "line": 42
            }
          }
        },
        {
          "id": "568",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 43
            },
            "start": {
              "column": 47,
              "line": 43
            }
          }
        },
        {
          "id": "569",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 45
            },
            "start": {
              "column": 30,
              "line": 45
            }
          }
        },
        {
          "id": "570",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 46
            },
            "start": {
              "column": 13,
              "line": 46
            }
          }
        },
        {
          "id": "571",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 46
            },
            "start": {
              "column": 13,
              "line": 46
            }
          }
        },
        {
          "id": "572",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 49
            },
            "start": {
              "column": 28,
              "line": 46
            }
          }
        },
        {
          "id": "573",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 47
            },
            "start": {
              "column": 29,
              "line": 47
            }
          }
        },
        {
          "id": "574",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 53
            },
            "start": {
              "column": 11,
              "line": 53
            }
          }
        },
        {
          "id": "575",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 53
            },
            "start": {
              "column": 11,
              "line": 53
            }
          }
        },
        {
          "id": "576",
          "mutatorName": "LogicalOperator",
          "replacement": "!this.selectedVoice || voices.length > 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 53
            },
            "start": {
              "column": 11,
              "line": 53
            }
          }
        },
        {
          "id": "577",
          "mutatorName": "BooleanLiteral",
          "replacement": "this.selectedVoice",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 53
            },
            "start": {
              "column": 11,
              "line": 53
            }
          }
        },
        {
          "id": "578",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 53
            },
            "start": {
              "column": 34,
              "line": 53
            }
          }
        },
        {
          "id": "579",
          "mutatorName": "EqualityOperator",
          "replacement": "voices.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 53
            },
            "start": {
              "column": 34,
              "line": 53
            }
          }
        },
        {
          "id": "580",
          "mutatorName": "EqualityOperator",
          "replacement": "voices.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 53
            },
            "start": {
              "column": 34,
              "line": 53
            }
          }
        },
        {
          "id": "581",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 55
            },
            "start": {
              "column": 53,
              "line": 53
            }
          }
        },
        {
          "id": "582",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 91
            },
            "start": {
              "column": 38,
              "line": 59
            }
          }
        },
        {
          "id": "583",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "584",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "585",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "586",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 61
            },
            "start": {
              "column": 9,
              "line": 61
            }
          }
        },
        {
          "id": "587",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 66
            },
            "start": {
              "column": 25,
              "line": 61
            }
          }
        },
        {
          "id": "588",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 62
            },
            "start": {
              "column": 14,
              "line": 62
            }
          }
        },
        {
          "id": "589",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 64
            },
            "start": {
              "column": 30,
              "line": 62
            }
          }
        },
        {
          "id": "590",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 63
            }
          }
        },
        {
          "id": "591",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 68
            },
            "start": {
              "column": 22,
              "line": 68
            }
          }
        },
        {
          "id": "592",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 78
            },
            "start": {
              "column": 9,
              "line": 70
            }
          }
        },
        {
          "id": "593",
          "mutatorName": "OptionalChaining",
          "replacement": "onProgress({\n  percentage: 0,\n  text: 'Loading Kokoro TTS model...'\n})",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 71
            },
            "start": {
              "column": 7,
              "line": 71
            }
          }
        },
        {
          "id": "594",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 71
            },
            "start": {
              "column": 20,
              "line": 71
            }
          }
        },
        {
          "id": "595",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 71
            },
            "start": {
              "column": 43,
              "line": 71
            }
          }
        },
        {
          "id": "596",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 77
            },
            "start": {
              "column": 23,
              "line": 77
            }
          }
        },
        {
          "id": "597",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 88
            },
            "start": {
              "column": 21,
              "line": 78
            }
          }
        },
        {
          "id": "598",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 79
            },
            "start": {
              "column": 20,
              "line": 79
            }
          }
        },
        {
          "id": "599",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 81
            },
            "start": {
              "column": 11,
              "line": 81
            }
          }
        },
        {
          "id": "600",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 81
            },
            "start": {
              "column": 11,
              "line": 81
            }
          }
        },
        {
          "id": "601",
          "mutatorName": "LogicalOperator",
          "replacement": "FALLBACK_TO_WEB_SPEECH || 'speechSynthesis' in window",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 81
            },
            "start": {
              "column": 11,
              "line": 81
            }
          }
        },
        {
          "id": "602",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 81
            },
            "start": {
              "column": 37,
              "line": 81
            }
          }
        },
        {
          "id": "603",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 85
            },
            "start": {
              "column": 66,
              "line": 81
            }
          }
        },
        {
          "id": "604",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 82
            },
            "start": {
              "column": 29,
              "line": 82
            }
          }
        },
        {
          "id": "605",
          "mutatorName": "OptionalChaining",
          "replacement": "onProgress({\n  percentage: 100,\n  text: 'Using Web Speech API'\n})",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 83
            },
            "start": {
              "column": 9,
              "line": 83
            }
          }
        },
        {
          "id": "606",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 83
            },
            "start": {
              "column": 22,
              "line": 83
            }
          }
        },
        {
          "id": "607",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 69,
              "line": 83
            },
            "start": {
              "column": 47,
              "line": 83
            }
          }
        },
        {
          "id": "608",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 84
            },
            "start": {
              "column": 16,
              "line": 84
            }
          }
        },
        {
          "id": "609",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 87
            },
            "start": {
              "column": 14,
              "line": 85
            }
          }
        },
        {
          "id": "610",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 86
            },
            "start": {
              "column": 25,
              "line": 86
            }
          }
        },
        {
          "id": "611",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 90
            },
            "start": {
              "column": 15,
              "line": 88
            }
          }
        },
        {
          "id": "612",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 89
            },
            "start": {
              "column": 24,
              "line": 89
            }
          }
        },
        {
          "id": "613",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 98
            },
            "start": {
              "column": 40,
              "line": 93
            }
          }
        },
        {
          "id": "614",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 94
            },
            "start": {
              "column": 21,
              "line": 94
            }
          }
        },
        {
          "id": "615",
          "mutatorName": "EqualityOperator",
          "replacement": "i < 100",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 94
            },
            "start": {
              "column": 21,
              "line": 94
            }
          }
        },
        {
          "id": "616",
          "mutatorName": "EqualityOperator",
          "replacement": "i > 100",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 94
            },
            "start": {
              "column": 21,
              "line": 94
            }
          }
        },
        {
          "id": "617",
          "mutatorName": "AssignmentOperator",
          "replacement": "i -= 10",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 94
            },
            "start": {
              "column": 31,
              "line": 94
            }
          }
        },
        {
          "id": "618",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 97
            },
            "start": {
              "column": 40,
              "line": 94
            }
          }
        },
        {
          "id": "619",
          "mutatorName": "OptionalChaining",
          "replacement": "onProgress({\n  percentage: i,\n  text: `Loading Kokoro model: ${i}%`\n})",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 75,
              "line": 95
            },
            "start": {
              "column": 7,
              "line": 95
            }
          }
        },
        {
          "id": "620",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "621",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 95
            },
            "start": {
              "column": 43,
              "line": 95
            }
          }
        },
        {
          "id": "622",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 96
            },
            "start": {
              "column": 25,
              "line": 96
            }
          }
        },
        {
          "id": "623",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 107
            },
            "start": {
              "column": 28,
              "line": 100
            }
          }
        },
        {
          "id": "624",
          "mutatorName": "MethodExpression",
          "replacement": "text.split(/[.!?]+/).map(s => s.trim())",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 105
            },
            "start": {
              "column": 12,
              "line": 102
            }
          }
        },
        {
          "id": "625",
          "mutatorName": "Regex",
          "replacement": "/[.!?]/",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 103
            },
            "start": {
              "column": 14,
              "line": 103
            }
          }
        },
        {
          "id": "626",
          "mutatorName": "Regex",
          "replacement": "/[^.!?]+/",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 103
            },
            "start": {
              "column": 14,
              "line": 103
            }
          }
        },
        {
          "id": "627",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 104
            },
            "start": {
              "column": 12,
              "line": 104
            }
          }
        },
        {
          "id": "628",
          "mutatorName": "MethodExpression",
          "replacement": "s",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 104
            },
            "start": {
              "column": 17,
              "line": 104
            }
          }
        },
        {
          "id": "629",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 105
            },
            "start": {
              "column": 15,
              "line": 105
            }
          }
        },
        {
          "id": "630",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 105
            },
            "start": {
              "column": 20,
              "line": 105
            }
          }
        },
        {
          "id": "631",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 105
            },
            "start": {
              "column": 20,
              "line": 105
            }
          }
        },
        {
          "id": "632",
          "mutatorName": "EqualityOperator",
          "replacement": "s.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 105
            },
            "start": {
              "column": 20,
              "line": 105
            }
          }
        },
        {
          "id": "633",
          "mutatorName": "EqualityOperator",
          "replacement": "s.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 105
            },
            "start": {
              "column": 20,
              "line": 105
            }
          }
        },
        {
          "id": "634",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 106
            },
            "start": {
              "column": 12,
              "line": 106
            }
          }
        },
        {
          "id": "635",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 106
            },
            "start": {
              "column": 21,
              "line": 106
            }
          }
        },
        {
          "id": "636",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 137
            },
            "start": {
              "column": 35,
              "line": 109
            }
          }
        },
        {
          "id": "637",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 133
            },
            "start": {
              "column": 9,
              "line": 112
            }
          }
        },
        {
          "id": "638",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 119
            },
            "start": {
              "column": 24,
              "line": 119
            }
          }
        },
        {
          "id": "639",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 120
            },
            "start": {
              "column": 23,
              "line": 120
            }
          }
        },
        {
          "id": "640",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 123
            },
            "start": {
              "column": 11,
              "line": 123
            }
          }
        },
        {
          "id": "641",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 24,
              "line": 123
            },
            "start": {
              "column": 11,
              "line": 123
            }
          }
        },
        {
          "id": "642",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 125
            },
            "start": {
              "column": 26,
              "line": 123
            }
          }
        },
        {
          "id": "643",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 127
            },
            "start": {
              "column": 11,
              "line": 127
            }
          }
        },
        {
          "id": "644",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 127
            },
            "start": {
              "column": 11,
              "line": 127
            }
          }
        },
        {
          "id": "645",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 129
            },
            "start": {
              "column": 30,
              "line": 127
            }
          }
        },
        {
          "id": "646",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 131
            },
            "start": {
              "column": 14,
              "line": 129
            }
          }
        },
        {
          "id": "647",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 136
            },
            "start": {
              "column": 21,
              "line": 133
            }
          }
        },
        {
          "id": "648",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 134
            },
            "start": {
              "column": 21,
              "line": 134
            }
          }
        },
        {
          "id": "649",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 149
            },
            "start": {
              "column": 35,
              "line": 139
            }
          }
        },
        {
          "id": "650",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 140
            },
            "start": {
              "column": 31,
              "line": 140
            }
          }
        },
        {
          "id": "651",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 148
            },
            "start": {
              "column": 49,
              "line": 142
            }
          }
        },
        {
          "id": "652",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 143
            },
            "start": {
              "column": 43,
              "line": 143
            }
          }
        },
        {
          "id": "653",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 144
            },
            "start": {
              "column": 37,
              "line": 144
            }
          }
        },
        {
          "id": "654",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 145
            },
            "start": {
              "column": 17,
              "line": 145
            }
          }
        },
        {
          "id": "655",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 146
            },
            "start": {
              "column": 24,
              "line": 146
            }
          }
        },
        {
          "id": "656",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 199
            },
            "start": {
              "column": 43,
              "line": 151
            }
          }
        },
        {
          "id": "657",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 198
            },
            "start": {
              "column": 45,
              "line": 152
            }
          }
        },
        {
          "id": "658",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 195
            },
            "start": {
              "column": 31,
              "line": 155
            }
          }
        },
        {
          "id": "659",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 156
            },
            "start": {
              "column": 13,
              "line": 156
            }
          }
        },
        {
          "id": "660",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 156
            },
            "start": {
              "column": 13,
              "line": 156
            }
          }
        },
        {
          "id": "661",
          "mutatorName": "LogicalOperator",
          "replacement": "currentIndex >= this.sentences.length && this.isStopped",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 156
            },
            "start": {
              "column": 13,
              "line": 156
            }
          }
        },
        {
          "id": "662",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 156
            },
            "start": {
              "column": 13,
              "line": 156
            }
          }
        },
        {
          "id": "663",
          "mutatorName": "EqualityOperator",
          "replacement": "currentIndex > this.sentences.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 156
            },
            "start": {
              "column": 13,
              "line": 156
            }
          }
        },
        {
          "id": "664",
          "mutatorName": "EqualityOperator",
          "replacement": "currentIndex < this.sentences.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 156
            },
            "start": {
              "column": 13,
              "line": 156
            }
          }
        },
        {
          "id": "665",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 159
            },
            "start": {
              "column": 70,
              "line": 156
            }
          }
        },
        {
          "id": "666",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 161
            },
            "start": {
              "column": 13,
              "line": 161
            }
          }
        },
        {
          "id": "667",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 161
            },
            "start": {
              "column": 13,
              "line": 161
            }
          }
        },
        {
          "id": "668",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 165
            },
            "start": {
              "column": 28,
              "line": 161
            }
          }
        },
        {
          "id": "669",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 172
            },
            "start": {
              "column": 13,
              "line": 172
            }
          }
        },
        {
          "id": "670",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 172
            },
            "start": {
              "column": 13,
              "line": 172
            }
          }
        },
        {
          "id": "671",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 174
            },
            "start": {
              "column": 33,
              "line": 172
            }
          }
        },
        {
          "id": "672",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 182
            },
            "start": {
              "column": 35,
              "line": 178
            }
          }
        },
        {
          "id": "673",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 179
            },
            "start": {
              "column": 15,
              "line": 179
            }
          }
        },
        {
          "id": "674",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 179
            },
            "start": {
              "column": 15,
              "line": 179
            }
          }
        },
        {
          "id": "675",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 12,
              "line": 181
            },
            "start": {
              "column": 30,
              "line": 179
            }
          }
        },
        {
          "id": "676",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 187
            },
            "start": {
              "column": 33,
              "line": 184
            }
          }
        },
        {
          "id": "677",
          "mutatorName": "UpdateOperator",
          "replacement": "currentIndex--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 185
            },
            "start": {
              "column": 11,
              "line": 185
            }
          }
        },
        {
          "id": "678",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 192
            },
            "start": {
              "column": 40,
              "line": 189
            }
          }
        },
        {
          "id": "679",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 190
            },
            "start": {
              "column": 25,
              "line": 190
            }
          }
        },
        {
          "id": "680",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 191
            },
            "start": {
              "column": 28,
              "line": 191
            }
          }
        },
        {
          "id": "681",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 210
            },
            "start": {
              "column": 27,
              "line": 201
            }
          }
        },
        {
          "id": "682",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 209
            },
            "start": {
              "column": 21,
              "line": 209
            }
          }
        },
        {
          "id": "683",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 225
            },
            "start": {
              "column": 29,
              "line": 212
            }
          }
        },
        {
          "id": "684",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 213
            },
            "start": {
              "column": 48,
              "line": 213
            }
          }
        },
        {
          "id": "685",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 214
            },
            "start": {
              "column": 9,
              "line": 214
            }
          }
        },
        {
          "id": "686",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 214
            },
            "start": {
              "column": 9,
              "line": 214
            }
          }
        },
        {
          "id": "687",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 222
            },
            "start": {
              "column": 21,
              "line": 214
            }
          }
        },
        {
          "id": "688",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 216
            },
            "start": {
              "column": 33,
              "line": 216
            }
          }
        },
        {
          "id": "689",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 218
            },
            "start": {
              "column": 67,
              "line": 216
            }
          }
        },
        {
          "id": "690",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 217
            },
            "start": {
              "column": 29,
              "line": 217
            }
          }
        },
        {
          "id": "691",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 221
            },
            "start": {
              "column": 32,
              "line": 221
            }
          }
        },
        {
          "id": "692",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 232
            },
            "start": {
              "column": 11,
              "line": 227
            }
          }
        },
        {
          "id": "693",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 228
            },
            "start": {
              "column": 9,
              "line": 228
            }
          }
        },
        {
          "id": "694",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 228
            },
            "start": {
              "column": 9,
              "line": 228
            }
          }
        },
        {
          "id": "695",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 230
            },
            "start": {
              "column": 28,
              "line": 228
            }
          }
        },
        {
          "id": "696",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 231
            },
            "start": {
              "column": 21,
              "line": 231
            }
          }
        },
        {
          "id": "697",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 239
            },
            "start": {
              "column": 12,
              "line": 234
            }
          }
        },
        {
          "id": "698",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 235
            },
            "start": {
              "column": 9,
              "line": 235
            }
          }
        },
        {
          "id": "699",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 235
            },
            "start": {
              "column": 9,
              "line": 235
            }
          }
        },
        {
          "id": "700",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 237
            },
            "start": {
              "column": 28,
              "line": 235
            }
          }
        },
        {
          "id": "701",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 238
            },
            "start": {
              "column": 21,
              "line": 238
            }
          }
        },
        {
          "id": "702",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 255
            },
            "start": {
              "column": 10,
              "line": 241
            }
          }
        },
        {
          "id": "703",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 242
            },
            "start": {
              "column": 22,
              "line": 242
            }
          }
        },
        {
          "id": "704",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 243
            },
            "start": {
              "column": 21,
              "line": 243
            }
          }
        },
        {
          "id": "705",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 245
            },
            "start": {
              "column": 9,
              "line": 245
            }
          }
        },
        {
          "id": "706",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 245
            },
            "start": {
              "column": 9,
              "line": 245
            }
          }
        },
        {
          "id": "707",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 247
            },
            "start": {
              "column": 28,
              "line": 245
            }
          }
        },
        {
          "id": "708",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 250
            },
            "start": {
              "column": 31,
              "line": 250
            }
          }
        },
        {
          "id": "709",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 252
            },
            "start": {
              "column": 65,
              "line": 250
            }
          }
        },
        {
          "id": "710",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 251
            },
            "start": {
              "column": 27,
              "line": 251
            }
          }
        },
        {
          "id": "711",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 259
            },
            "start": {
              "column": 17,
              "line": 257
            }
          }
        },
        {
          "id": "712",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 263
            },
            "start": {
              "column": 19,
              "line": 261
            }
          }
        },
        {
          "id": "713",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 270
            },
            "start": {
              "column": 24,
              "line": 265
            }
          }
        },
        {
          "id": "714",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 267
            },
            "start": {
              "column": 9,
              "line": 267
            }
          }
        },
        {
          "id": "715",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 267
            },
            "start": {
              "column": 9,
              "line": 267
            }
          }
        },
        {
          "id": "716",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 269
            },
            "start": {
              "column": 29,
              "line": 267
            }
          }
        },
        {
          "id": "717",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 274
            },
            "start": {
              "column": 24,
              "line": 272
            }
          }
        },
        {
          "id": "718",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 278
            },
            "start": {
              "column": 26,
              "line": 276
            }
          }
        },
        {
          "id": "719",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 277
            },
            "start": {
              "column": 12,
              "line": 277
            }
          }
        },
        {
          "id": "720",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 282
            },
            "start": {
              "column": 23,
              "line": 280
            }
          }
        },
        {
          "id": "721",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 281
            },
            "start": {
              "column": 12,
              "line": 281
            }
          }
        },
        {
          "id": "722",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 281
            },
            "start": {
              "column": 12,
              "line": 281
            }
          }
        },
        {
          "id": "723",
          "mutatorName": "EqualityOperator",
          "replacement": "this.kokoroModel === null",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 281
            },
            "start": {
              "column": 12,
              "line": 281
            }
          }
        },
        {
          "id": "724",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 288
            },
            "start": {
              "column": 22,
              "line": 284
            }
          }
        },
        {
          "id": "725",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 285
            },
            "start": {
              "column": 9,
              "line": 285
            }
          }
        },
        {
          "id": "726",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 285
            },
            "start": {
              "column": 9,
              "line": 285
            }
          }
        },
        {
          "id": "727",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 285
            },
            "start": {
              "column": 34,
              "line": 285
            }
          }
        },
        {
          "id": "728",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 286
            },
            "start": {
              "column": 9,
              "line": 286
            }
          }
        },
        {
          "id": "729",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 286
            },
            "start": {
              "column": 9,
              "line": 286
            }
          }
        },
        {
          "id": "730",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 47,
              "line": 286
            },
            "start": {
              "column": 35,
              "line": 286
            }
          }
        },
        {
          "id": "731",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 287
            },
            "start": {
              "column": 12,
              "line": 287
            }
          }
        }
      ],
      "source": "// Configuration\nconst FALLBACK_TO_WEB_SPEECH = true;\n\nexport class TTSModule {\n  constructor() {\n    this.kokoroModel = null;\n    this.useWebSpeech = false;\n    this.isLoading = false;\n    this.currentUtterance = null;\n    this.sentences = [];\n    this.currentSentenceIndex = 0;\n    this.isPaused = false;\n    this.isStopped = false;\n    \n    // Settings\n    this.rate = 1.0;\n    this.pitch = 1.0;\n    this.selectedVoice = null;\n    \n    this.initializeWebSpeech();\n  }\n\n  initializeWebSpeech() {\n    if ('speechSynthesis' in window) {\n      // Load voices\n      this.loadVoices();\n      \n      // Handle voice changes\n      speechSynthesis.addEventListener('voiceschanged', () => {\n        this.loadVoices();\n      });\n    }\n  }\n\n  loadVoices() {\n    const voices = speechSynthesis.getVoices();\n    const voiceSelect = document.getElementById('tts-voice');\n    \n    if (voiceSelect && voices.length > 0) {\n      voiceSelect.innerHTML = '';\n      \n      voices.forEach((voice, index) => {\n        const option = document.createElement('option');\n        option.value = index;\n        option.textContent = `${voice.name} (${voice.lang})`;\n        if (voice.default) {\n          option.selected = true;\n          this.selectedVoice = voice;\n        }\n        voiceSelect.appendChild(option);\n      });\n      \n      if (!this.selectedVoice && voices.length > 0) {\n        this.selectedVoice = voices[0];\n      }\n    }\n  }\n\n  async initializeKokoro(onProgress) {\n    if (this.kokoroModel) return this.kokoroModel;\n    if (this.isLoading) {\n      while (this.isLoading) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      return this.kokoroModel;\n    }\n\n    this.isLoading = true;\n\n    try {\n      onProgress?.({ percentage: 0, text: 'Loading Kokoro TTS model...' });\n      \n      // Simulate model loading for demonstration\n      await this._simulateModelLoad(onProgress);\n\n      // For now, we'll fall back to Web Speech API\n      throw new Error('Kokoro model not available in this demo');\n    } catch (error) {\n      console.warn('Kokoro TTS not available, falling back to Web Speech API:', error);\n\n      if (FALLBACK_TO_WEB_SPEECH && 'speechSynthesis' in window) {\n        this.useWebSpeech = true;\n        onProgress?.({ percentage: 100, text: 'Using Web Speech API' });\n        return 'web-speech';\n      } else {\n        throw new Error('No TTS system available');\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async _simulateModelLoad(onProgress) {\n    for (let i = 0; i <= 100; i += 10) {\n      onProgress?.({ percentage: i, text: `Loading Kokoro model: ${i}%` });\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n\n  splitIntoSentences(text) {\n    // Simple sentence splitting\n    return text\n      .split(/[.!?]+/)\n      .map(s => s.trim())\n      .filter(s => s.length > 0)\n      .map(s => s + '.');\n  }\n\n  async speak(text, options = {}) {\n    const { outputElement, onProgress } = options;\n\n    try {\n      // Initialize TTS system\n      await this.initializeKokoro(onProgress);\n      \n      // Split text into sentences\n      this.sentences = this.splitIntoSentences(text);\n      this.currentSentenceIndex = 0;\n      this.isStopped = false;\n      this.isPaused = false;\n\n      // Display sentences in output element\n      if (outputElement) {\n        this.displaySentences(outputElement);\n      }\n\n      if (this.useWebSpeech) {\n        await this.speakWithWebSpeech(outputElement);\n      } else {\n        await this.speakWithKokoro();\n      }\n\n    } catch (error) {\n      console.error('TTS failed:', error);\n      throw error;\n    }\n  }\n\n  displaySentences(outputElement) {\n    outputElement.innerHTML = '';\n    \n    this.sentences.forEach((sentence, index) => {\n      const span = document.createElement('span');\n      span.textContent = sentence + ' ';\n      span.id = `sentence-${index}`;\n      span.className = 'sentence';\n      outputElement.appendChild(span);\n    });\n  }\n\n  async speakWithWebSpeech(outputElement) {\n    return new Promise((resolve, reject) => {\n      let currentIndex = 0;\n\n      const speakNext = () => {\n        if (currentIndex >= this.sentences.length || this.isStopped) {\n          resolve();\n          return;\n        }\n\n        if (this.isPaused) {\n          // Wait for resume\n          setTimeout(speakNext, 100);\n          return;\n        }\n\n        const sentence = this.sentences[currentIndex];\n        const utterance = new SpeechSynthesisUtterance(sentence);\n        this.currentUtterance = utterance;\n\n        // Configure utterance\n        if (this.selectedVoice) {\n          utterance.voice = this.selectedVoice;\n        }\n        utterance.rate = this.rate;\n        utterance.pitch = this.pitch;\n\n        utterance.onstart = () => {\n          if (outputElement) {\n            this.markSentenceSpoken(currentIndex);\n          }\n        };\n\n        utterance.onend = () => {\n          currentIndex++;\n          setTimeout(speakNext, 100); // Small delay between sentences\n        };\n\n        utterance.onerror = (event) => {\n          console.error('Speech synthesis error:', event);\n          reject(new Error('Speech synthesis failed'));\n        };\n\n        speechSynthesis.speak(utterance);\n      };\n\n      speakNext();\n    });\n  }\n\n  async speakWithKokoro() {\n    // Placeholder for Kokoro implementation\n    // In a real implementation, this would:\n    // 1. Load the Kokoro ONNX model\n    // 2. Generate audio for each sentence\n    // 3. Stream audio to the AudioWorklet\n    // 4. Mark sentences as spoken based on audio playback progress\n    \n    throw new Error('Kokoro TTS not implemented in this demo');\n  }\n\n  markSentenceSpoken(index) {\n    const sentenceEl = document.getElementById(`sentence-${index}`);\n    if (sentenceEl) {\n      // Remove previous highlights\n      document.querySelectorAll('.sentence.spoken').forEach(el => {\n        el.classList.remove('spoken');\n      });\n      \n      // Highlight current sentence\n      sentenceEl.classList.add('spoken');\n    }\n    \n    this.currentSentenceIndex = index;\n  }\n\n  pause() {\n    if (this.useWebSpeech) {\n      speechSynthesis.pause();\n    }\n    this.isPaused = true;\n  }\n\n  resume() {\n    if (this.useWebSpeech) {\n      speechSynthesis.resume();\n    }\n    this.isPaused = false;\n  }\n\n  stop() {\n    this.isStopped = true;\n    this.isPaused = false;\n    \n    if (this.useWebSpeech) {\n      speechSynthesis.cancel();\n    }\n    \n    // Clear highlights\n    document.querySelectorAll('.sentence.spoken').forEach(el => {\n      el.classList.remove('spoken');\n    });\n    \n    this.currentSentenceIndex = 0;\n  }\n\n  setRate(rate) {\n    this.rate = rate;\n  }\n\n  setPitch(pitch) {\n    this.pitch = pitch;\n  }\n\n  setVoice(voiceIndex) {\n    const voices = speechSynthesis.getVoices();\n    if (voices[voiceIndex]) {\n      this.selectedVoice = voices[voiceIndex];\n    }\n  }\n\n  getAvailableVoices() {\n    return speechSynthesis.getVoices();\n  }\n\n  isWebSpeechAvailable() {\n    return 'speechSynthesis' in window;\n  }\n\n  isKokoroAvailable() {\n    return this.kokoroModel !== null;\n  }\n\n  getCurrentSystem() {\n    if (this.kokoroModel) return 'kokoro';\n    if (this.useWebSpeech) return 'web-speech';\n    return 'none';\n  }\n}\n"
    },
    "src/worklet.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "861",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 24
            },
            "start": {
              "column": 17,
              "line": 3
            }
          }
        },
        {
          "id": "862",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 7
            },
            "start": {
              "column": 23,
              "line": 7
            }
          }
        },
        {
          "id": "863",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 11
            },
            "start": {
              "column": 21,
              "line": 11
            }
          }
        },
        {
          "id": "864",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 12
            },
            "start": {
              "column": 22,
              "line": 12
            }
          }
        },
        {
          "id": "865",
          "mutatorName": "ArithmeticOperator",
          "replacement": "sampleRate / 2",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 15
            },
            "start": {
              "column": 40,
              "line": 15
            }
          }
        },
        {
          "id": "866",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 23
            },
            "start": {
              "column": 38,
              "line": 21
            }
          }
        },
        {
          "id": "867",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 43
            },
            "start": {
              "column": 23,
              "line": 26
            }
          }
        },
        {
          "id": "868",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'queue-audio':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 32
            },
            "start": {
              "column": 7,
              "line": 30
            }
          }
        },
        {
          "id": "869",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 30
            },
            "start": {
              "column": 12,
              "line": 30
            }
          }
        },
        {
          "id": "870",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'pause':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 35
            },
            "start": {
              "column": 7,
              "line": 33
            }
          }
        },
        {
          "id": "871",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 19,
              "line": 33
            },
            "start": {
              "column": 12,
              "line": 33
            }
          }
        },
        {
          "id": "872",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 34
            },
            "start": {
              "column": 25,
              "line": 34
            }
          }
        },
        {
          "id": "873",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'resume':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 38
            },
            "start": {
              "column": 7,
              "line": 36
            }
          }
        },
        {
          "id": "874",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 20,
              "line": 36
            },
            "start": {
              "column": 12,
              "line": 36
            }
          }
        },
        {
          "id": "875",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 30,
              "line": 37
            },
            "start": {
              "column": 25,
              "line": 37
            }
          }
        },
        {
          "id": "876",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'stop':",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 15,
              "line": 41
            },
            "start": {
              "column": 7,
              "line": 39
            }
          }
        },
        {
          "id": "877",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 39
            },
            "start": {
              "column": 12,
              "line": 39
            }
          }
        },
        {
          "id": "878",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 67
            },
            "start": {
              "column": 40,
              "line": 45
            }
          }
        },
        {
          "id": "879",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 48
            },
            "start": {
              "column": 9,
              "line": 48
            }
          }
        },
        {
          "id": "880",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 48
            },
            "start": {
              "column": 9,
              "line": 48
            }
          }
        },
        {
          "id": "881",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 50
            },
            "start": {
              "column": 44,
              "line": 48
            }
          }
        },
        {
          "id": "882",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "883",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "884",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 52
            },
            "start": {
              "column": 44,
              "line": 50
            }
          }
        },
        {
          "id": "885",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 55
            },
            "start": {
              "column": 12,
              "line": 52
            }
          }
        },
        {
          "id": "886",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 46,
              "line": 53
            },
            "start": {
              "column": 21,
              "line": 53
            }
          }
        },
        {
          "id": "887",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 63
            },
            "start": {
              "column": 26,
              "line": 57
            }
          }
        },
        {
          "id": "888",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 62
            },
            "start": {
              "column": 17,
              "line": 59
            }
          }
        },
        {
          "id": "889",
          "mutatorName": "UpdateOperator",
          "replacement": "this.chunkIndex--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 61
            },
            "start": {
              "column": 21,
              "line": 61
            }
          }
        },
        {
          "id": "890",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 91
            },
            "start": {
              "column": 20,
              "line": 69
            }
          }
        },
        {
          "id": "891",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 70
            },
            "start": {
              "column": 12,
              "line": 70
            }
          }
        },
        {
          "id": "892",
          "mutatorName": "LogicalOperator",
          "replacement": "this.audioQueue.length > 0 || this.availableSamples < this.ringBuffer.length * 0.8",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 70
            },
            "start": {
              "column": 12,
              "line": 70
            }
          }
        },
        {
          "id": "893",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 70
            },
            "start": {
              "column": 12,
              "line": 70
            }
          }
        },
        {
          "id": "894",
          "mutatorName": "EqualityOperator",
          "replacement": "this.audioQueue.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 70
            },
            "start": {
              "column": 12,
              "line": 70
            }
          }
        },
        {
          "id": "895",
          "mutatorName": "EqualityOperator",
          "replacement": "this.audioQueue.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 70
            },
            "start": {
              "column": 12,
              "line": 70
            }
          }
        },
        {
          "id": "896",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 70
            },
            "start": {
              "column": 42,
              "line": 70
            }
          }
        },
        {
          "id": "897",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples <= this.ringBuffer.length * 0.8",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 70
            },
            "start": {
              "column": 42,
              "line": 70
            }
          }
        },
        {
          "id": "898",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples >= this.ringBuffer.length * 0.8",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 70
            },
            "start": {
              "column": 42,
              "line": 70
            }
          }
        },
        {
          "id": "899",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.ringBuffer.length / 0.8",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 94,
              "line": 70
            },
            "start": {
              "column": 66,
              "line": 70
            }
          }
        },
        {
          "id": "900",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 90
            },
            "start": {
              "column": 96,
              "line": 70
            }
          }
        },
        {
          "id": "901",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 74
            },
            "start": {
              "column": 23,
              "line": 74
            }
          }
        },
        {
          "id": "902",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= data.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 74
            },
            "start": {
              "column": 23,
              "line": 74
            }
          }
        },
        {
          "id": "903",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= data.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 74
            },
            "start": {
              "column": 23,
              "line": 74
            }
          }
        },
        {
          "id": "904",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 74
            },
            "start": {
              "column": 40,
              "line": 74
            }
          }
        },
        {
          "id": "905",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 83
            },
            "start": {
              "column": 45,
              "line": 74
            }
          }
        },
        {
          "id": "906",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(this.writePosition + 1) * this.ringBuffer.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 76
            },
            "start": {
              "column": 30,
              "line": 76
            }
          }
        },
        {
          "id": "907",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.writePosition - 1",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 76
            },
            "start": {
              "column": 31,
              "line": 76
            }
          }
        },
        {
          "id": "908",
          "mutatorName": "UpdateOperator",
          "replacement": "this.availableSamples--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 77
            },
            "start": {
              "column": 9,
              "line": 77
            }
          }
        },
        {
          "id": "909",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 80
            },
            "start": {
              "column": 13,
              "line": 80
            }
          }
        },
        {
          "id": "910",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 80
            },
            "start": {
              "column": 13,
              "line": 80
            }
          }
        },
        {
          "id": "911",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples > this.ringBuffer.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 80
            },
            "start": {
              "column": 13,
              "line": 80
            }
          }
        },
        {
          "id": "912",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples < this.ringBuffer.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 80
            },
            "start": {
              "column": 13,
              "line": 80
            }
          }
        },
        {
          "id": "913",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 82
            },
            "start": {
              "column": 62,
              "line": 80
            }
          }
        },
        {
          "id": "914",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 89
            },
            "start": {
              "column": 29,
              "line": 86
            }
          }
        },
        {
          "id": "915",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 87
            },
            "start": {
              "column": 15,
              "line": 87
            }
          }
        },
        {
          "id": "916",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 103
            },
            "start": {
              "column": 10,
              "line": 93
            }
          }
        },
        {
          "id": "917",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 94
            },
            "start": {
              "column": 23,
              "line": 94
            }
          }
        },
        {
          "id": "918",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 97
            },
            "start": {
              "column": 21,
              "line": 97
            }
          }
        },
        {
          "id": "919",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 98
            },
            "start": {
              "column": 22,
              "line": 98
            }
          }
        },
        {
          "id": "920",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 126
            },
            "start": {
              "column": 28,
              "line": 105
            }
          }
        },
        {
          "id": "921",
          "mutatorName": "BooleanLiteral",
          "replacement": "this._validOutput(output)",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 108
            },
            "start": {
              "column": 9,
              "line": 108
            }
          }
        },
        {
          "id": "922",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 108
            },
            "start": {
              "column": 9,
              "line": 108
            }
          }
        },
        {
          "id": "923",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 35,
              "line": 108
            },
            "start": {
              "column": 9,
              "line": 108
            }
          }
        },
        {
          "id": "924",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 108
            },
            "start": {
              "column": 44,
              "line": 108
            }
          }
        },
        {
          "id": "925",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "926",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "927",
          "mutatorName": "LogicalOperator",
          "replacement": "this.isPaused && this.availableSamples === 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "928",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 113
            },
            "start": {
              "column": 26,
              "line": 113
            }
          }
        },
        {
          "id": "929",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples !== 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 113
            },
            "start": {
              "column": 26,
              "line": 113
            }
          }
        },
        {
          "id": "930",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 116
            },
            "start": {
              "column": 55,
              "line": 113
            }
          }
        },
        {
          "id": "931",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 18,
              "line": 115
            },
            "start": {
              "column": 14,
              "line": 115
            }
          }
        },
        {
          "id": "932",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 16,
              "line": 125
            },
            "start": {
              "column": 12,
              "line": 125
            }
          }
        },
        {
          "id": "933",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 130
            },
            "start": {
              "column": 24,
              "line": 128
            }
          }
        },
        {
          "id": "934",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 129
            },
            "start": {
              "column": 12,
              "line": 129
            }
          }
        },
        {
          "id": "935",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 129
            },
            "start": {
              "column": 12,
              "line": 129
            }
          }
        },
        {
          "id": "936",
          "mutatorName": "LogicalOperator",
          "replacement": "output || output.length > 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 129
            },
            "start": {
              "column": 12,
              "line": 129
            }
          }
        },
        {
          "id": "937",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 129
            },
            "start": {
              "column": 22,
              "line": 129
            }
          }
        },
        {
          "id": "938",
          "mutatorName": "EqualityOperator",
          "replacement": "output.length >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 129
            },
            "start": {
              "column": 22,
              "line": 129
            }
          }
        },
        {
          "id": "939",
          "mutatorName": "EqualityOperator",
          "replacement": "output.length <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 129
            },
            "start": {
              "column": 22,
              "line": 129
            }
          }
        },
        {
          "id": "940",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 149
            },
            "start": {
              "column": 39,
              "line": 132
            }
          }
        },
        {
          "id": "941",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 26,
              "line": 135
            },
            "start": {
              "column": 22,
              "line": 135
            }
          }
        },
        {
          "id": "942",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 137
            },
            "start": {
              "column": 21,
              "line": 137
            }
          }
        },
        {
          "id": "943",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= frames",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 137
            },
            "start": {
              "column": 21,
              "line": 137
            }
          }
        },
        {
          "id": "944",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= frames",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 137
            },
            "start": {
              "column": 21,
              "line": 137
            }
          }
        },
        {
          "id": "945",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 137
            },
            "start": {
              "column": 33,
              "line": 137
            }
          }
        },
        {
          "id": "946",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 146
            },
            "start": {
              "column": 38,
              "line": 137
            }
          }
        },
        {
          "id": "947",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 138
            },
            "start": {
              "column": 11,
              "line": 138
            }
          }
        },
        {
          "id": "948",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 138
            },
            "start": {
              "column": 11,
              "line": 138
            }
          }
        },
        {
          "id": "949",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 138
            },
            "start": {
              "column": 11,
              "line": 138
            }
          }
        },
        {
          "id": "950",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 138
            },
            "start": {
              "column": 11,
              "line": 138
            }
          }
        },
        {
          "id": "951",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 143
            },
            "start": {
              "column": 38,
              "line": 138
            }
          }
        },
        {
          "id": "952",
          "mutatorName": "ArithmeticOperator",
          "replacement": "(this.readPosition + 1) * this.ringBuffer.length",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 140
            },
            "start": {
              "column": 29,
              "line": 140
            }
          }
        },
        {
          "id": "953",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.readPosition - 1",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 51,
              "line": 140
            },
            "start": {
              "column": 30,
              "line": 140
            }
          }
        },
        {
          "id": "954",
          "mutatorName": "UpdateOperator",
          "replacement": "this.availableSamples++",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 141
            },
            "start": {
              "column": 9,
              "line": 141
            }
          }
        },
        {
          "id": "955",
          "mutatorName": "UpdateOperator",
          "replacement": "samplesWritten--",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 142
            },
            "start": {
              "column": 9,
              "line": 142
            }
          }
        },
        {
          "id": "956",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 145
            },
            "start": {
              "column": 14,
              "line": 143
            }
          }
        },
        {
          "id": "957",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 148
            },
            "start": {
              "column": 12,
              "line": 148
            }
          }
        },
        {
          "id": "958",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 155
            },
            "start": {
              "column": 24,
              "line": 151
            }
          }
        },
        {
          "id": "959",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "960",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "961",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples <= this.ringBuffer.length * 0.3",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "962",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples >= this.ringBuffer.length * 0.3",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 152
            },
            "start": {
              "column": 9,
              "line": 152
            }
          }
        },
        {
          "id": "963",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.ringBuffer.length / 0.3",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 61,
              "line": 152
            },
            "start": {
              "column": 33,
              "line": 152
            }
          }
        },
        {
          "id": "964",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 154
            },
            "start": {
              "column": 63,
              "line": 152
            }
          }
        },
        {
          "id": "965",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 172
            },
            "start": {
              "column": 47,
              "line": 157
            }
          }
        },
        {
          "id": "966",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "967",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "968",
          "mutatorName": "EqualityOperator",
          "replacement": "samplesWritten < 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "969",
          "mutatorName": "EqualityOperator",
          "replacement": "samplesWritten > 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 158
            },
            "start": {
              "column": 9,
              "line": 158
            }
          }
        },
        {
          "id": "970",
          "mutatorName": "ArithmeticOperator",
          "replacement": "sampleRate / 0.1",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 45,
              "line": 160
            },
            "start": {
              "column": 29,
              "line": 160
            }
          }
        },
        {
          "id": "971",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 161
            },
            "start": {
              "column": 9,
              "line": 161
            }
          }
        },
        {
          "id": "972",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 161
            },
            "start": {
              "column": 9,
              "line": 161
            }
          }
        },
        {
          "id": "973",
          "mutatorName": "LogicalOperator",
          "replacement": "this.bufferPosition > 0 || this.bufferPosition % samplesPerChunk < samplesWritten",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 161
            },
            "start": {
              "column": 9,
              "line": 161
            }
          }
        },
        {
          "id": "974",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 161
            },
            "start": {
              "column": 9,
              "line": 161
            }
          }
        },
        {
          "id": "975",
          "mutatorName": "EqualityOperator",
          "replacement": "this.bufferPosition >= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 161
            },
            "start": {
              "column": 9,
              "line": 161
            }
          }
        },
        {
          "id": "976",
          "mutatorName": "EqualityOperator",
          "replacement": "this.bufferPosition <= 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 161
            },
            "start": {
              "column": 9,
              "line": 161
            }
          }
        },
        {
          "id": "977",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 161
            },
            "start": {
              "column": 36,
              "line": 161
            }
          }
        },
        {
          "id": "978",
          "mutatorName": "EqualityOperator",
          "replacement": "this.bufferPosition % samplesPerChunk <= samplesWritten",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 161
            },
            "start": {
              "column": 36,
              "line": 161
            }
          }
        },
        {
          "id": "979",
          "mutatorName": "EqualityOperator",
          "replacement": "this.bufferPosition % samplesPerChunk >= samplesWritten",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 90,
              "line": 161
            },
            "start": {
              "column": 36,
              "line": 161
            }
          }
        },
        {
          "id": "980",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.bufferPosition * samplesPerChunk",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 73,
              "line": 161
            },
            "start": {
              "column": 36,
              "line": 161
            }
          }
        },
        {
          "id": "981",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 169
            },
            "start": {
              "column": 92,
              "line": 161
            }
          }
        },
        {
          "id": "982",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 168
            },
            "start": {
              "column": 29,
              "line": 162
            }
          }
        },
        {
          "id": "983",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 31,
              "line": 163
            },
            "start": {
              "column": 15,
              "line": 163
            }
          }
        },
        {
          "id": "984",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 167
            },
            "start": {
              "column": 15,
              "line": 164
            }
          }
        },
        {
          "id": "985",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.bufferPosition * samplesPerChunk",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 165
            },
            "start": {
              "column": 34,
              "line": 165
            }
          }
        },
        {
          "id": "986",
          "mutatorName": "AssignmentOperator",
          "replacement": "this.bufferPosition -= samplesWritten",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 171
            },
            "start": {
              "column": 5,
              "line": 171
            }
          }
        },
        {
          "id": "987",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 179
            },
            "start": {
              "column": 41,
              "line": 174
            }
          }
        },
        {
          "id": "988",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 175
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "989",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 175
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "990",
          "mutatorName": "LogicalOperator",
          "replacement": "wasPlaying && this.availableSamples === 0 || this.audioQueue.length === 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 175
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "991",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 175
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "992",
          "mutatorName": "LogicalOperator",
          "replacement": "wasPlaying || this.availableSamples === 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 175
            },
            "start": {
              "column": 9,
              "line": 175
            }
          }
        },
        {
          "id": "993",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 175
            },
            "start": {
              "column": 23,
              "line": 175
            }
          }
        },
        {
          "id": "994",
          "mutatorName": "EqualityOperator",
          "replacement": "this.availableSamples !== 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 175
            },
            "start": {
              "column": 23,
              "line": 175
            }
          }
        },
        {
          "id": "995",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 175
            },
            "start": {
              "column": 54,
              "line": 175
            }
          }
        },
        {
          "id": "996",
          "mutatorName": "EqualityOperator",
          "replacement": "this.audioQueue.length !== 0",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 82,
              "line": 175
            },
            "start": {
              "column": 54,
              "line": 175
            }
          }
        },
        {
          "id": "997",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 178
            },
            "start": {
              "column": 84,
              "line": 175
            }
          }
        },
        {
          "id": "998",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 29,
              "line": 176
            },
            "start": {
              "column": 24,
              "line": 176
            }
          }
        },
        {
          "id": "999",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 177
            },
            "start": {
              "column": 29,
              "line": 177
            }
          }
        },
        {
          "id": "1000",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 177
            },
            "start": {
              "column": 37,
              "line": 177
            }
          }
        },
        {
          "id": "1001",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 188
            },
            "start": {
              "column": 57,
              "line": 181
            }
          }
        },
        {
          "id": "1002",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 182
            },
            "start": {
              "column": 9,
              "line": 182
            }
          }
        },
        {
          "id": "1003",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 182
            },
            "start": {
              "column": 9,
              "line": 182
            }
          }
        },
        {
          "id": "1004",
          "mutatorName": "LogicalOperator",
          "replacement": "samplesWritten < framesToProcess || this.isPlaying",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 182
            },
            "start": {
              "column": 9,
              "line": 182
            }
          }
        },
        {
          "id": "1005",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 182
            },
            "start": {
              "column": 9,
              "line": 182
            }
          }
        },
        {
          "id": "1006",
          "mutatorName": "EqualityOperator",
          "replacement": "samplesWritten <= framesToProcess",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 182
            },
            "start": {
              "column": 9,
              "line": 182
            }
          }
        },
        {
          "id": "1007",
          "mutatorName": "EqualityOperator",
          "replacement": "samplesWritten >= framesToProcess",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 41,
              "line": 182
            },
            "start": {
              "column": 9,
              "line": 182
            }
          }
        },
        {
          "id": "1008",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 187
            },
            "start": {
              "column": 61,
              "line": 182
            }
          }
        },
        {
          "id": "1009",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 8,
              "line": 186
            },
            "start": {
              "column": 29,
              "line": 183
            }
          }
        },
        {
          "id": "1010",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 32,
              "line": 184
            },
            "start": {
              "column": 15,
              "line": 184
            }
          }
        },
        {
          "id": "1011",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 185
            },
            "start": {
              "column": 15,
              "line": 185
            }
          }
        },
        {
          "id": "1012",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 40,
              "line": 192
            },
            "start": {
              "column": 19,
              "line": 192
            }
          }
        }
      ],
      "source": "// AudioWorklet processor for PCM audio playback\nclass PCMQueueProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    \n    // Audio queue and playback state\n    this.audioQueue = [];\n    this.currentBuffer = null;\n    this.bufferPosition = 0;\n    this.chunkIndex = 0;\n    this.isPaused = false;\n    this.isPlaying = false;\n    \n    // Ring buffer for smooth playback\n    this.ringBuffer = new Float32Array(sampleRate * 2); // 2 seconds buffer\n    this.writePosition = 0;\n    this.readPosition = 0;\n    this.availableSamples = 0;\n    \n    // Handle messages from main thread\n    this.port.onmessage = (event) => {\n      this.handleMessage(event.data);\n    };\n  }\n\n  handleMessage(data) {\n    const { type } = data;\n    \n    switch (type) {\n      case 'queue-audio':\n        this.queueAudio(data.audioData, data.metadata);\n        break;\n      case 'pause':\n        this.isPaused = true;\n        break;\n      case 'resume':\n        this.isPaused = false;\n        break;\n      case 'stop':\n        this.stop();\n        break;\n    }\n  }\n\n  queueAudio(audioData, metadata = {}) {\n    // Convert to Float32Array if needed\n    let float32Data;\n    if (audioData instanceof Float32Array) {\n      float32Data = audioData;\n    } else if (audioData instanceof Array) {\n      float32Data = new Float32Array(audioData);\n    } else {\n      console.error('Invalid audio data type');\n      return;\n    }\n\n    this.audioQueue.push({\n      data: float32Data,\n      metadata: {\n        ...metadata,\n        chunkIndex: this.chunkIndex++\n      }\n    });\n\n    // Fill ring buffer\n    this.fillRingBuffer();\n  }\n\n  fillRingBuffer() {\n    while (this.audioQueue.length > 0 && this.availableSamples < this.ringBuffer.length * 0.8) {\n      const chunk = this.audioQueue.shift();\n      const data = chunk.data;\n      \n      for (let i = 0; i < data.length; i++) {\n        this.ringBuffer[this.writePosition] = data[i];\n        this.writePosition = (this.writePosition + 1) % this.ringBuffer.length;\n        this.availableSamples++;\n        \n        // Prevent buffer overflow\n        if (this.availableSamples >= this.ringBuffer.length) {\n          break;\n        }\n      }\n      \n      // Notify that chunk has been queued\n      this.port.postMessage({\n        type: 'chunk-queued',\n        data: chunk.metadata\n      });\n    }\n  }\n\n  stop() {\n    this.audioQueue = [];\n    this.currentBuffer = null;\n    this.bufferPosition = 0;\n    this.isPaused = false;\n    this.isPlaying = false;\n    this.availableSamples = 0;\n    this.readPosition = 0;\n    this.writePosition = 0;\n    this.chunkIndex = 0;\n  }\n\n  process(inputs, outputs) {\n    const output = outputs[0];\n\n    if (!this._validOutput(output)) return true;\n\n    const outputChannel = output[0];\n    const framesToProcess = outputChannel.length;\n\n    if (this.isPaused || this.availableSamples === 0) {\n      outputChannel.fill(0);\n      return true;\n    }\n\n    const { samplesWritten, wasPlaying } = this._writeOutput(outputChannel, framesToProcess);\n\n    this._maybeRefillBuffer();\n    this._maybeReportChunkCompletion(samplesWritten);\n    this._maybeReportPlaybackEnded(wasPlaying);\n    this._maybeReportUnderrun(samplesWritten, framesToProcess);\n\n    return true;\n  }\n\n  _validOutput(output) {\n    return output && output.length > 0;\n  }\n\n  _writeOutput(outputChannel, frames) {\n    let samplesWritten = 0;\n    const wasPlaying = this.isPlaying;\n    this.isPlaying = true;\n\n    for (let i = 0; i < frames; i++) {\n      if (this.availableSamples > 0) {\n        outputChannel[i] = this.ringBuffer[this.readPosition];\n        this.readPosition = (this.readPosition + 1) % this.ringBuffer.length;\n        this.availableSamples--;\n        samplesWritten++;\n      } else {\n        outputChannel[i] = 0;\n      }\n    }\n\n    return { samplesWritten, wasPlaying };\n  }\n\n  _maybeRefillBuffer() {\n    if (this.availableSamples < this.ringBuffer.length * 0.3) {\n      this.fillRingBuffer();\n    }\n  }\n\n  _maybeReportChunkCompletion(samplesWritten) {\n    if (samplesWritten <= 0) return;\n\n    const samplesPerChunk = sampleRate * 0.1; // Assuming 100ms chunks\n    if (this.bufferPosition > 0 && this.bufferPosition % samplesPerChunk < samplesWritten) {\n      this.port.postMessage({\n        type: 'chunk-complete',\n        data: {\n          chunkIndex: Math.floor(this.bufferPosition / samplesPerChunk),\n          timestamp: currentTime\n        }\n      });\n    }\n\n    this.bufferPosition += samplesWritten;\n  }\n\n  _maybeReportPlaybackEnded(wasPlaying) {\n    if (wasPlaying && this.availableSamples === 0 && this.audioQueue.length === 0) {\n      this.isPlaying = false;\n      this.port.postMessage({ type: 'playback-ended' });\n    }\n  }\n\n  _maybeReportUnderrun(samplesWritten, framesToProcess) {\n    if (samplesWritten < framesToProcess && this.isPlaying) {\n      this.port.postMessage({\n        type: 'buffer-underrun',\n        data: { requested: framesToProcess, available: samplesWritten }\n      });\n    }\n  }\n}\n\n// Register the processor\nregisterProcessor('pcm-queue-processor', PCMQueueProcessor);\n"
    },
    "src/components/audio-processor.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "348",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -623506052, path: \"0:0\", endOnFailure: true }\nCounterexample: [[0]]\nShrunk 1 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:42:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 14,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 5
            },
            "start": {
              "column": 19,
              "line": 5
            }
          }
        },
        {
          "id": "349",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1408660397, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 25
            },
            "start": {
              "column": 32,
              "line": 8
            }
          }
        },
        {
          "id": "350",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 1267935020, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "347",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 640565893, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 14,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 6
            },
            "start": {
              "column": 35,
              "line": 3
            }
          }
        },
        {
          "id": "351",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Invalid audio data\"\n\nReceived function did not throw\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:71:77)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "352",
          "mutatorName": "LogicalOperator",
          "replacement": "!audioData && audioData.length === 0",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Invalid audio data\"\n\nReceived function did not throw\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:71:77)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "353",
          "mutatorName": "BooleanLiteral",
          "replacement": "audioData",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1579253037, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "355",
          "mutatorName": "EqualityOperator",
          "replacement": "audioData.length !== 0",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1650937799, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 23,
              "line": 9
            }
          }
        },
        {
          "id": "354",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Invalid audio data\"\n\nReceived function did not throw\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:71:77)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 11,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 9
            },
            "start": {
              "column": 23,
              "line": 9
            }
          }
        },
        {
          "id": "356",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Invalid audio data\"\n\nReceived function did not throw\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:71:77)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22",
            "33"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 11
            },
            "start": {
              "column": 47,
              "line": 9
            }
          }
        },
        {
          "id": "357",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Invalid audio data\"\nReceived message:   \"\"\n\n      67 |         } else {\n      68 |           stryCov_9fa48(\"356\");\n    > 69 |           throw new Error(stryMutAct_9fa48(\"357\") ? \"\" : (stryCov_9fa48(\"357\"), 'Invalid audio data'));\n         |                 ^\n      70 |         }\n      71 |       }\n      72 |\n\n      at AudioProcessor.processAudioChunk (src/components/audio-processor.js:69:17)\n      at processAudioChunk (src/components/audio-processor.property.test.js:71:36)\n      at Object.<anonymous> (../../node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (../../node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (src/components/audio-processor.property.test.js:71:77)\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:71:77)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22",
            "33"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 10
            },
            "start": {
              "column": 23,
              "line": 10
            }
          }
        },
        {
          "id": "358",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBeInstanceOf(expected)\n\nExpected constructor: Float32Array\nReceived constructor: Array\n\n    at Object.toBeInstanceOf (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:28:20)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 10,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "359",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 702046741, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 10,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "24",
            "31",
            "32",
            "33",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "361",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Audio data must be Float32Array or Array\"\n\nReceived function did not throw\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:36:58)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "32",
            "33"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 17
            },
            "start": {
              "column": 16,
              "line": 17
            }
          }
        },
        {
          "id": "360",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 806024359, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:15:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 8,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "24",
            "31",
            "34",
            "35"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 17
            },
            "start": {
              "column": 44,
              "line": 15
            }
          }
        },
        {
          "id": "362",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: Audio data must be Float32Array or Array\n    at AudioProcessor.processAudioChunk (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.js:94:17)\n    at Object.processAudioChunk (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:26:30)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "32",
            "33"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 17
            },
            "start": {
              "column": 16,
              "line": 17
            }
          }
        },
        {
          "id": "363",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "TypeError: float32Data is not iterable (cannot read property undefined)\n    at AudioProcessor.push [as processAudioChunk] (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.js:97:19)\n    at Object.processAudioChunk (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:26:30)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "32"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 42,
              "line": 17
            }
          }
        },
        {
          "id": "364",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Audio data must be Float32Array or Array\"\nReceived message:   \"float32Data is not iterable (cannot read property undefined)\"\n\n       95 |         }\n       96 |       }\n    >  97 |       this.buffer.push(...float32Data);\n          |                   ^\n       98 |       return float32Data;\n       99 |     }\n      100 |   }\n\n      at AudioProcessor.push [as processAudioChunk] (src/components/audio-processor.js:97:19)\n      at processAudioChunk (src/components/audio-processor.test.js:36:28)\n      at Object.<anonymous> (../../node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (../../node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (src/components/audio-processor.test.js:36:58)\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:36:58)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 21
            },
            "start": {
              "column": 12,
              "line": 19
            }
          }
        },
        {
          "id": "365",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toThrow(expected)\n\nExpected substring: \"Audio data must be Float32Array or Array\"\nReceived message:   \"\"\n\n      92 |         } else {\n      93 |           stryCov_9fa48(\"364\");\n    > 94 |           throw new Error(stryMutAct_9fa48(\"365\") ? \"\" : (stryCov_9fa48(\"365\"), 'Audio data must be Float32Array or Array'));\n         |                 ^\n      95 |         }\n      96 |       }\n      97 |       this.buffer.push(...float32Data);\n\n      at AudioProcessor.processAudioChunk (src/components/audio-processor.js:94:17)\n      at processAudioChunk (src/components/audio-processor.test.js:36:28)\n      at Object.<anonymous> (../../node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (../../node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (src/components/audio-processor.test.js:36:58)\n    at Object.toThrow (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:36:58)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 20
            },
            "start": {
              "column": 23,
              "line": 20
            }
          }
        },
        {
          "id": "366",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -2075140633, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [[0]]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:27:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 7,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19",
            "20",
            "21",
            "30",
            "31",
            "32",
            "35"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 29
            },
            "start": {
              "column": 21,
              "line": 27
            }
          }
        },
        {
          "id": "367",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 740390566, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:86:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "24"
          ],
          "coveredBy": [
            "24",
            "34"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 23,
              "line": 31
            }
          }
        },
        {
          "id": "368",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.buffer.length * this.sampleRate",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -449399952, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [8000,[0]]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:86:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "24"
          ],
          "coveredBy": [
            "24",
            "34"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 32
            },
            "start": {
              "column": 12,
              "line": 32
            }
          }
        },
        {
          "id": "369",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 173904300, path: \"0:0\", endOnFailure: true }\nCounterexample: [[0]]\nShrunk 1 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:55:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "35"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 37
            },
            "start": {
              "column": 17,
              "line": 35
            }
          }
        },
        {
          "id": "370",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -2101659273, path: \"0:0\", endOnFailure: true }\nCounterexample: [[0]]\nShrunk 1 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.property.test.js:55:16)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "35"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 36
            },
            "start": {
              "column": 19,
              "line": 36
            }
          }
        },
        {
          "id": "371",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [1, 2, 3, 4, 5, 6]\nReceived: undefined\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:60:24)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 54
            },
            "start": {
              "column": 30,
              "line": 39
            }
          }
        },
        {
          "id": "372",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 3\nReceived: 6\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:64:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 40
            },
            "start": {
              "column": 9,
              "line": 40
            }
          }
        },
        {
          "id": "373",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 40
            },
            "start": {
              "column": 9,
              "line": 40
            }
          }
        },
        {
          "id": "374",
          "mutatorName": "EqualityOperator",
          "replacement": "targetSampleRate !== this.sampleRate",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 3\nReceived: 6\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:64:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 40
            },
            "start": {
              "column": 9,
              "line": 40
            }
          }
        },
        {
          "id": "375",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 42
            },
            "start": {
              "column": 47,
              "line": 40
            }
          }
        },
        {
          "id": "377",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.buffer.length * ratio",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 3\nReceived: 12\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:64:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 45
            },
            "start": {
              "column": 34,
              "line": 45
            }
          }
        },
        {
          "id": "376",
          "mutatorName": "ArithmeticOperator",
          "replacement": "this.sampleRate * targetSampleRate",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 3\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:64:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 44
            },
            "start": {
              "column": 19,
              "line": 44
            }
          }
        },
        {
          "id": "378",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:65:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 48
            },
            "start": {
              "column": 21,
              "line": 48
            }
          }
        },
        {
          "id": "379",
          "mutatorName": "EqualityOperator",
          "replacement": "i <= newLength",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 48
            },
            "start": {
              "column": 21,
              "line": 48
            }
          }
        },
        {
          "id": "380",
          "mutatorName": "EqualityOperator",
          "replacement": "i >= newLength",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:65:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 48
            },
            "start": {
              "column": 21,
              "line": 48
            }
          }
        },
        {
          "id": "381",
          "mutatorName": "UpdateOperator",
          "replacement": "i--",
          "statusReason": "Hit limit reached (301/300)",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 48
            },
            "start": {
              "column": 36,
              "line": 48
            }
          }
        },
        {
          "id": "382",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:65:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 51
            },
            "start": {
              "column": 41,
              "line": 48
            }
          }
        },
        {
          "id": "383",
          "mutatorName": "ArithmeticOperator",
          "replacement": "i / ratio",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 3\nReceived: 1\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:66:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 49
            },
            "start": {
              "column": 35,
              "line": 49
            }
          }
        },
        {
          "id": "384",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 3\nReceived: 1\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:66:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 50
            },
            "start": {
              "column": 22,
              "line": 50
            }
          }
        },
        {
          "id": "385",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:65:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 50
            },
            "start": {
              "column": 22,
              "line": 50
            }
          }
        },
        {
          "id": "386",
          "mutatorName": "LogicalOperator",
          "replacement": "this.buffer[srcIndex] && 0",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/components/audio-processor.test.js:65:28)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 50
            },
            "start": {
              "column": 22,
              "line": 50
            }
          }
        }
      ],
      "source": "// Audio utilities for the Local LLM Demo\nexport class AudioProcessor {\n  constructor(sampleRate = 24000) {\n    this.sampleRate = sampleRate;\n    this.buffer = [];\n  }\n\n  processAudioChunk(audioData) {\n    if (!audioData || audioData.length === 0) {\n      throw new Error('Invalid audio data');\n    }\n\n    // Convert to Float32Array if needed\n    let float32Data;\n    if (audioData instanceof Float32Array) {\n      float32Data = audioData;\n    } else if (Array.isArray(audioData)) {\n      float32Data = new Float32Array(audioData);\n    } else {\n      throw new Error('Audio data must be Float32Array or Array');\n    }\n\n    this.buffer.push(...float32Data);\n    return float32Data;\n  }\n\n  getBufferLength() {\n    return this.buffer.length;\n  }\n\n  getBufferDuration() {\n    return this.buffer.length / this.sampleRate;\n  }\n\n  clearBuffer() {\n    this.buffer = [];\n  }\n\n  resample(targetSampleRate) {\n    if (targetSampleRate === this.sampleRate) {\n      return new Float32Array(this.buffer);\n    }\n\n    const ratio = this.sampleRate / targetSampleRate;\n    const newLength = Math.floor(this.buffer.length / ratio);\n    const resampled = new Float32Array(newLength);\n\n    for (let i = 0; i < newLength; i++) {\n      const srcIndex = Math.floor(i * ratio);\n      resampled[i] = this.buffer[srcIndex] || 0;\n    }\n\n    return resampled;\n  }\n}\n"
    },
    "src/utils/text-processing.js": {
      "language": "javascript",
      "mutants": [
        {
          "id": "732",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "TypeError: Cannot read properties of undefined (reading 'length')\n    at Object.length (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:21)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 30
            },
            "start": {
              "column": 60,
              "line": 2
            }
          }
        },
        {
          "id": "733",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 1\nReceived:   0\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:29)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 3
            },
            "start": {
              "column": 7,
              "line": 3
            }
          }
        },
        {
          "id": "734",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:27:39)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 3
            },
            "start": {
              "column": 7,
              "line": 3
            }
          }
        },
        {
          "id": "735",
          "mutatorName": "LogicalOperator",
          "replacement": "!text && typeof text !== 'string'",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:27:39)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 3
            },
            "start": {
              "column": 7,
              "line": 3
            }
          }
        },
        {
          "id": "736",
          "mutatorName": "BooleanLiteral",
          "replacement": "text",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 1\nReceived:   0\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:29)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 4,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 12,
              "line": 3
            },
            "start": {
              "column": 7,
              "line": 3
            }
          }
        },
        {
          "id": "737",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 3
            },
            "start": {
              "column": 16,
              "line": 3
            }
          }
        },
        {
          "id": "738",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof text === 'string'",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -288124126, path: \"0:0:1:0:0:0:0:0:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 9 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 3
            },
            "start": {
              "column": 16,
              "line": 3
            }
          }
        },
        {
          "id": "739",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 1176306188, path: \"0:0:1:0:0:0:0:0:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 9 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 3
            },
            "start": {
              "column": 32,
              "line": 3
            }
          }
        },
        {
          "id": "740",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:27:39)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 5
            },
            "start": {
              "column": 42,
              "line": 3
            }
          }
        },
        {
          "id": "741",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Stryker was here\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:27:39)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 4
            },
            "start": {
              "column": 12,
              "line": 4
            }
          }
        },
        {
          "id": "742",
          "mutatorName": "MethodExpression",
          "replacement": "text",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 7
            },
            "start": {
              "column": 17,
              "line": 7
            }
          }
        },
        {
          "id": "743",
          "mutatorName": "Regex",
          "replacement": "/\\s/",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 7
            },
            "start": {
              "column": 35,
              "line": 7
            }
          }
        },
        {
          "id": "744",
          "mutatorName": "Regex",
          "replacement": "/\\S+/",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 108202628, path: \"0:0:1:0:0:0:0:0:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 9 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 7
            },
            "start": {
              "column": 35,
              "line": 7
            }
          }
        },
        {
          "id": "745",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1648014976, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [\" \",10]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 8
            },
            "start": {
              "column": 18,
              "line": 8
            }
          }
        },
        {
          "id": "746",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -730492581, path: \"0:0:0:0\", endOnFailure: true }\nCounterexample: [\" \",10]\nShrunk 3 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 9
            },
            "start": {
              "column": 22,
              "line": 9
            }
          }
        },
        {
          "id": "747",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 2101286712, path: \"0:0:1:0:0:0:0:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 8 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 29,
              "line": 11
            }
          }
        },
        {
          "id": "748",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 1\nReceived:   1\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:29)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "749",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "750",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChunk.join(' ').length + word.length + 1 < chunkSize",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "751",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChunk.join(' ').length + word.length + 1 > chunkSize",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "752",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentChunk.join(' ').length + word.length - 1",
          "statusReason": "Error: expect(received).toBeLessThanOrEqual(expected)\n\nExpected: <= 20\nReceived:    22\n    at toBeLessThanOrEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:22:30)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:21:14)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "753",
          "mutatorName": "ArithmeticOperator",
          "replacement": "currentChunk.join(' ').length - word.length",
          "statusReason": "Error: expect(received).toBeLessThanOrEqual(expected)\n\nExpected: <= 20\nReceived:    28\n    at toBeLessThanOrEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:22:30)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:21:14)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "754",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBeLessThanOrEqual(expected)\n\nExpected: <= 20\nReceived:    23\n    at toBeLessThanOrEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:22:30)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:21:14)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 12
            },
            "start": {
              "column": 27,
              "line": 12
            }
          }
        },
        {
          "id": "755",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 1\nReceived:   0\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:29)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "25"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 14
            },
            "start": {
              "column": 71,
              "line": 12
            }
          }
        },
        {
          "id": "756",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 1\nReceived:   1\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:29)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 22
            },
            "start": {
              "column": 12,
              "line": 14
            }
          }
        },
        {
          "id": "757",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n+   \"\",\n    \"supercalifragilisticexpialidocious\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:34:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "758",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "759",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChunk.length >= 0",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n+   \"\",\n    \"supercalifragilisticexpialidocious\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:34:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "760",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChunk.length <= 0",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n+   \"\",\n    \"supercalifragilisticexpialidocious\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:34:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "761",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 1\nReceived:   1\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:20:29)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 18
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "762",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 16
            },
            "start": {
              "column": 39,
              "line": 16
            }
          }
        },
        {
          "id": "763",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 17
            },
            "start": {
              "column": 24,
              "line": 17
            }
          }
        },
        {
          "id": "765",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n    \"supercalifragilisticexpialidocious\",\n+   \"\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:34:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "764",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 94 tests\n{ seed: -1976569420, path: \"93:3:2:3:3:3:3:3:3:9:8:8:8:8:8:8:14:13:13:13:13:13:13:18:17:17:17:17:17:17:22:21:21:21:26:25:30:29:29:29:29:33:32:32:36:35:35:35:35:38:37:37:37:37:37:39:38:38:38:38:38:38:39:2\", endOnFailure: true }\nCounterexample: [\"!!!!!!!!!!\",10]\nShrunk 63 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 21
            },
            "start": {
              "column": 14,
              "line": 18
            }
          }
        },
        {
          "id": "766",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -793577053, path: \"0:0:1:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 4 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "767",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChunk.length >= 0",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n    \"supercalifragilisticexpialidocious\",\n+   \"\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:34:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "768",
          "mutatorName": "EqualityOperator",
          "replacement": "currentChunk.length <= 0",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 1341845319, path: \"0:0:1:0:0:0:0:0:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 9 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "2",
            "25"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 25
            },
            "start": {
              "column": 7,
              "line": 25
            }
          }
        },
        {
          "id": "769",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 484602610, path: \"0:0:1:0:0:0:1\", endOnFailure: true }\nCounterexample: [\"!\",10]\nShrunk 6 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "25"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 27
            },
            "start": {
              "column": 32,
              "line": 25
            }
          }
        },
        {
          "id": "770",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: Property failed after 3 tests\n{ seed: 335522210, path: \"2:3:1:1:1:1:4:3:3:3:4\", endOnFailure: true }\nCounterexample: [\"! !\",10]\nShrunk 10 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:15:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "25"
          ],
          "coveredBy": [
            "0",
            "25"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 26
            },
            "start": {
              "column": 35,
              "line": 26
            }
          }
        },
        {
          "id": "771",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1334124034, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [\" \"]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:27:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 42,
              "line": 32
            }
          }
        },
        {
          "id": "772",
          "mutatorName": "MethodExpression",
          "replacement": "text.split(/[.!?]+/).map(s => s.trim())",
          "statusReason": "Error: expect(received).toHaveLength(expected)\n\nExpected length: 3\nReceived length: 4\nReceived array:  [\"Hello world.\", \"This is a test.\", \"How are you.\", \".\"]\n    at Object.toHaveLength (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/index.test.js:24:23)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 36
            },
            "start": {
              "column": 10,
              "line": 33
            }
          }
        },
        {
          "id": "773",
          "mutatorName": "Regex",
          "replacement": "/[.!?]/",
          "status": "Survived",
          "static": false,
          "testsCompleted": 6,
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 34
            },
            "start": {
              "column": 12,
              "line": 34
            }
          }
        },
        {
          "id": "774",
          "mutatorName": "Regex",
          "replacement": "/[^.!?]+/",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 3\n\n  Array [\n-   \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n+   \"..\",\n+   \"?.\",\n+   \"!.\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 34
            },
            "start": {
              "column": 12,
              "line": 34
            }
          }
        },
        {
          "id": "775",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 517281337, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [\" \"]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:27:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "776",
          "mutatorName": "MethodExpression",
          "replacement": "s",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 2\n+ Received  + 2\n\n  Array [\n    \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n+   \" How are you.\",\n+   \" Fine.\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 35
            },
            "start": {
              "column": 15,
              "line": 35
            }
          }
        },
        {
          "id": "777",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 5\n+ Received  + 1\n\n- Array [\n-   \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n- ]\n+ Array []\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 36
            }
          }
        },
        {
          "id": "778",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n    \"Hello world.\",\n    \"How are you.\",\n    \"Fine.\",\n+   \".\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 36
            },
            "start": {
              "column": 18,
              "line": 36
            }
          }
        },
        {
          "id": "779",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 5\n+ Received  + 1\n\n- Array [\n-   \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n- ]\n+ Array []\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 36
            },
            "start": {
              "column": 18,
              "line": 36
            }
          }
        },
        {
          "id": "780",
          "mutatorName": "EqualityOperator",
          "replacement": "s.length >= 0",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 0\n+ Received  + 1\n\n  Array [\n    \"Hello world.\",\n    \"How are you.\",\n    \"Fine.\",\n+   \".\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 36
            },
            "start": {
              "column": 18,
              "line": 36
            }
          }
        },
        {
          "id": "781",
          "mutatorName": "EqualityOperator",
          "replacement": "s.length <= 0",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n  Array [\n-   \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n+   \".\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 36
            },
            "start": {
              "column": 18,
              "line": 36
            }
          }
        },
        {
          "id": "782",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 3\n\n  Array [\n-   \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n+   undefined,\n+   undefined,\n+   undefined,\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 6,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "6",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 37
            },
            "start": {
              "column": 10,
              "line": 37
            }
          }
        },
        {
          "id": "783",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 3\n\n  Array [\n-   \"Hello world.\",\n-   \"How are you.\",\n-   \"Fine.\",\n+   \"Hello world\",\n+   \"How are you\",\n+   \"Fine\",\n  ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:58:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 5,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5",
            "7",
            "26",
            "38",
            "39"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 37
            },
            "start": {
              "column": 19,
              "line": 37
            }
          }
        },
        {
          "id": "784",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nMatcher error: received value must not be null nor undefined\n\nReceived has value: undefined\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:76:25)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "40"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 47
            },
            "start": {
              "column": 52,
              "line": 40
            }
          }
        },
        {
          "id": "786",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: undefined\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 58
            },
            "start": {
              "column": 37,
              "line": 49
            }
          }
        },
        {
          "id": "785",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"<|im_start|>system\"\nReceived string:    \"\"\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/index.test.js:39:23)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "40"
          ],
          "coveredBy": [
            "8",
            "40"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 10,
              "line": 41
            }
          }
        },
        {
          "id": "787",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "788",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "TypeError: Cannot read properties of null (reading 'trim')\n    at trim (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.js:148:133)\n    at Object.<anonymous> (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:48:27)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "790",
          "mutatorName": "BooleanLiteral",
          "replacement": "text",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 12,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "789",
          "mutatorName": "LogicalOperator",
          "replacement": "!text && typeof text !== 'string'",
          "status": "Survived",
          "static": false,
          "testsCompleted": 2,
          "coveredBy": [
            "3",
            "4"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 50
            },
            "start": {
              "column": 7,
              "line": 50
            }
          }
        },
        {
          "id": "791",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "792",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof text === 'string'",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 50
            },
            "start": {
              "column": 16,
              "line": 50
            }
          }
        },
        {
          "id": "793",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 50
            },
            "start": {
              "column": 32,
              "line": 50
            }
          }
        },
        {
          "id": "794",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "TypeError: Cannot read properties of null (reading 'trim')\n    at trim (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.js:148:133)\n    at Object.<anonymous> (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:48:27)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 52
            },
            "start": {
              "column": 42,
              "line": 50
            }
          }
        },
        {
          "id": "795",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"\"\nReceived: \"Stryker was here!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:47:33)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 51
            },
            "start": {
              "column": 12,
              "line": 51
            }
          }
        },
        {
          "id": "796",
          "mutatorName": "MethodExpression",
          "replacement": "text",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \" Hello world. How are you? Fine! \"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 12,
              "line": 55
            },
            "start": {
              "column": 10,
              "line": 54
            }
          }
        },
        {
          "id": "797",
          "mutatorName": "Regex",
          "replacement": "/\\s/g",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"Hello    world. How are you? Fine!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 56
            },
            "start": {
              "column": 14,
              "line": 56
            }
          }
        },
        {
          "id": "798",
          "mutatorName": "Regex",
          "replacement": "/\\S+/g",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"          \"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 56
            },
            "start": {
              "column": 14,
              "line": 56
            }
          }
        },
        {
          "id": "799",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"Helloworld. Howareyou? Fine!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 56
            },
            "start": {
              "column": 22,
              "line": 56
            }
          }
        },
        {
          "id": "800",
          "mutatorName": "Regex",
          "replacement": "/([^.!?])\\s*([A-Z])/g",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"Hello world.How are you?Fine!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 57
            },
            "start": {
              "column": 14,
              "line": 57
            }
          }
        },
        {
          "id": "801",
          "mutatorName": "Regex",
          "replacement": "/([.!?])\\s([A-Z])/g",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"Hello world.How are you?Fine!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 57
            },
            "start": {
              "column": 14,
              "line": 57
            }
          }
        },
        {
          "id": "802",
          "mutatorName": "Regex",
          "replacement": "/([.!?])\\S*([A-Z])/g",
          "status": "Survived",
          "static": false,
          "testsCompleted": 1,
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 57
            },
            "start": {
              "column": 14,
              "line": 57
            }
          }
        },
        {
          "id": "803",
          "mutatorName": "Regex",
          "replacement": "/([.!?])\\s*([^A-Z])/g",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"Hello world.How are you?Fine!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 57
            },
            "start": {
              "column": 14,
              "line": 57
            }
          }
        },
        {
          "id": "804",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Hello world. How are you? Fine!\"\nReceived: \"Hello worldow are youine!\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:43:26)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 57
            },
            "start": {
              "column": 36,
              "line": 57
            }
          }
        },
        {
          "id": "805",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: 1521941331, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [\" \"]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:37:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "11",
            "12",
            "27"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 67
            },
            "start": {
              "column": 42,
              "line": 60
            }
          }
        },
        {
          "id": "806",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1005889537, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [\" \"]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:37:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "11",
            "12",
            "27"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 61
            }
          }
        },
        {
          "id": "808",
          "mutatorName": "LogicalOperator",
          "replacement": "!text && typeof text !== 'string'",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "11",
            "12",
            "27"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 61
            }
          }
        },
        {
          "id": "807",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "TypeError: Cannot read properties of null (reading 'length')\n    at length (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.js:166:94)\n    at Object.<anonymous> (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:111:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "11",
            "12",
            "27"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 61
            }
          }
        },
        {
          "id": "809",
          "mutatorName": "BooleanLiteral",
          "replacement": "text",
          "statusReason": "Error: expect(received).toBeGreaterThan(expected)\n\nExpected: > 0\nReceived:   0\n    at Object.toBeGreaterThan (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:105:21)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "11",
            "12",
            "27"
          ],
          "location": {
            "end": {
              "column": 12,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 61
            }
          }
        },
        {
          "id": "810",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 2,
          "coveredBy": [
            "11",
            "27"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 61
            },
            "start": {
              "column": 16,
              "line": 61
            }
          }
        },
        {
          "id": "811",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof text === 'string'",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -696553887, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [\" \"]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:37:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "11",
            "27"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 61
            },
            "start": {
              "column": 16,
              "line": 61
            }
          }
        },
        {
          "id": "812",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: Property failed after 1 tests\n{ seed: -1751839111, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [\" \"]\nShrunk 2 time(s)\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:162:19)\n    at throwIfFailed (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:171:11)\n    at reportRunDetails (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/utils/RunDetailsFormatter.js:184:16)\n    at Object.assert (/workspaces/LocalLLMDemo/node_modules/fast-check/lib/cjs/check/runner/Runner.js:65:52)\n    at Object.assert (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.property.test.js:37:12)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "27"
          ],
          "coveredBy": [
            "11",
            "27"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 61
            },
            "start": {
              "column": 32,
              "line": 61
            }
          }
        },
        {
          "id": "813",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "TypeError: Cannot read properties of null (reading 'length')\n    at length (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.js:166:94)\n    at Object.<anonymous> (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:111:32)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 63
            },
            "start": {
              "column": 42,
              "line": 61
            }
          }
        },
        {
          "id": "814",
          "mutatorName": "ArithmeticOperator",
          "replacement": "text.length * 4",
          "status": "Survived",
          "static": false,
          "testsCompleted": 2,
          "coveredBy": [
            "11",
            "27"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 66
            },
            "start": {
              "column": 20,
              "line": 66
            }
          }
        },
        {
          "id": "815",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nMatcher error: received value must not be null nor undefined\n\nReceived has value: undefined\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:89:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 73
            },
            "start": {
              "column": 42,
              "line": 69
            }
          }
        },
        {
          "id": "816",
          "mutatorName": "Regex",
          "replacement": "/(\\s)/",
          "status": "Survived",
          "static": false,
          "testsCompleted": 2,
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 71
            },
            "start": {
              "column": 28,
              "line": 71
            }
          }
        },
        {
          "id": "817",
          "mutatorName": "Regex",
          "replacement": "/(\\S+)/",
          "status": "Survived",
          "static": false,
          "testsCompleted": 2,
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 71
            },
            "start": {
              "column": 28,
              "line": 71
            }
          }
        },
        {
          "id": "818",
          "mutatorName": "MethodExpression",
          "replacement": "words",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:96:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 72
            },
            "start": {
              "column": 10,
              "line": 72
            }
          }
        },
        {
          "id": "819",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nExpected value: \"Hello\"\nReceived array: []\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:89:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 72
            },
            "start": {
              "column": 23,
              "line": 72
            }
          }
        },
        {
          "id": "820",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:96:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 72
            },
            "start": {
              "column": 31,
              "line": 72
            }
          }
        },
        {
          "id": "821",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nExpected value: \"Hello\"\nReceived array: []\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:89:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 72
            },
            "start": {
              "column": 31,
              "line": 72
            }
          }
        },
        {
          "id": "822",
          "mutatorName": "EqualityOperator",
          "replacement": "word.length >= 0",
          "statusReason": "Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"\",\n+ ]\n    at Object.toEqual (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:96:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 72
            },
            "start": {
              "column": 31,
              "line": 72
            }
          }
        },
        {
          "id": "823",
          "mutatorName": "EqualityOperator",
          "replacement": "word.length <= 0",
          "statusReason": "Error: expect(received).toContain(expected) // indexOf\n\nExpected value: \"Hello\"\nReceived array: []\n    at Object.toContain (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:89:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 72
            },
            "start": {
              "column": 31,
              "line": 72
            }
          }
        },
        {
          "id": "824",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: undefined\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 83
            },
            "start": {
              "column": 41,
              "line": 75
            }
          }
        },
        {
          "id": "825",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"0:00\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "826",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"0:00\"\nReceived: \"-1:-1\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:124:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "827",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof seconds !== 'number' && seconds < 0",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"0:00\"\nReceived: \"-1:-1\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:124:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "828",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"0:00\"\nReceived: \"NaN:NaN\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:125:41)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "830",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"0:00\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 76
            },
            "start": {
              "column": 26,
              "line": 76
            }
          }
        },
        {
          "id": "829",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof seconds === 'number'",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"0:00\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 76
            },
            "start": {
              "column": 7,
              "line": 76
            }
          }
        },
        {
          "id": "831",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"0:00\"\nReceived: \"-1:-1\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:124:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 76
            },
            "start": {
              "column": 38,
              "line": 76
            }
          }
        },
        {
          "id": "832",
          "mutatorName": "EqualityOperator",
          "replacement": "seconds <= 0",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 76
            },
            "start": {
              "column": 38,
              "line": 76
            }
          }
        },
        {
          "id": "834",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"0:00\"\nReceived: \"-1:-1\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:124:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 78
            },
            "start": {
              "column": 51,
              "line": 76
            }
          }
        },
        {
          "id": "833",
          "mutatorName": "EqualityOperator",
          "replacement": "seconds >= 0",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"0:00\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "14",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 76
            },
            "start": {
              "column": 38,
              "line": 76
            }
          }
        },
        {
          "id": "835",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"0:00\"\nReceived: \"\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:124:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 77
            },
            "start": {
              "column": 12,
              "line": 77
            }
          }
        },
        {
          "id": "836",
          "mutatorName": "ArithmeticOperator",
          "replacement": "seconds * 60",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"3900:05\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "28"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 80
            },
            "start": {
              "column": 30,
              "line": 80
            }
          }
        },
        {
          "id": "837",
          "mutatorName": "ArithmeticOperator",
          "replacement": "seconds * 60",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"1:3900\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "28"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 81
            },
            "start": {
              "column": 39,
              "line": 81
            }
          }
        },
        {
          "id": "839",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"1:5\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "28"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 82
            },
            "start": {
              "column": 64,
              "line": 82
            }
          }
        },
        {
          "id": "838",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"1:05\"\nReceived: \"\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:118:34)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13",
            "28"
          ],
          "location": {
            "end": {
              "column": 70,
              "line": 82
            },
            "start": {
              "column": 10,
              "line": 82
            }
          }
        },
        {
          "id": "840",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "TypeError: fn is not a function\n    at Object.fn (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:136:7)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:290:26)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 95
            },
            "start": {
              "column": 38,
              "line": 85
            }
          }
        },
        {
          "id": "841",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Timeout.toBe [as _onTimeout] (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:141:27)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7), Error: thrown: \"Exceeded timeout of 5000 ms for a test while waiting for `done()` to be called.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at test (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:130:5)\n    at _dispatchDescribe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:55:5)\n    at describe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:129:3)\n    at _dispatchDescribe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:55:5)\n    at Object.describe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:14:1)\n    at Runtime._execModule (/workspaces/LocalLLMDemo/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/workspaces/LocalLLMDemo/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/workspaces/LocalLLMDemo/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 94
            },
            "start": {
              "column": 45,
              "line": 87
            }
          }
        },
        {
          "id": "842",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at Timeout.toBe [as _onTimeout] (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:141:27)\n    at listOnTimeout (node:internal/timers:588:17)\n    at processTimers (node:internal/timers:523:7), Error: thrown: \"Exceeded timeout of 5000 ms for a test while waiting for `done()` to be called.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at test (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:130:5)\n    at _dispatchDescribe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:55:5)\n    at describe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:129:3)\n    at _dispatchDescribe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/index.js:55:5)\n    at Object.describe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:14:1)\n    at Runtime._execModule (/workspaces/LocalLLMDemo/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/workspaces/LocalLLMDemo/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/workspaces/LocalLLMDemo/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 91
            },
            "start": {
              "column": 25,
              "line": 88
            }
          }
        },
        {
          "id": "843",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: undefined\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 103
            },
            "start": {
              "column": 66,
              "line": 97
            }
          }
        },
        {
          "id": "844",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 90,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "845",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"Infinity\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:154:48)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 90,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "846",
          "mutatorName": "LogicalOperator",
          "replacement": "(typeof tokenCount !== 'number' || typeof durationMs !== 'number') && durationMs <= 0",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"Infinity\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:154:48)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 90,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "847",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"NaN\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:155:57)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "848",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof tokenCount !== 'number' && typeof durationMs !== 'number'",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"NaN\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:155:57)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "849",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"NaN\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:155:57)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "850",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof tokenCount === 'number'",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 98
            },
            "start": {
              "column": 7,
              "line": 98
            }
          }
        },
        {
          "id": "851",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 98
            },
            "start": {
              "column": 29,
              "line": 98
            }
          }
        },
        {
          "id": "852",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "static": false,
          "testsCompleted": 3,
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 98
            },
            "start": {
              "column": 41,
              "line": 98
            }
          }
        },
        {
          "id": "853",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof durationMs === 'number'",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 98
            },
            "start": {
              "column": 41,
              "line": 98
            }
          }
        },
        {
          "id": "854",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 98
            },
            "start": {
              "column": 63,
              "line": 98
            }
          }
        },
        {
          "id": "855",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"Infinity\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:154:48)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 90,
              "line": 98
            },
            "start": {
              "column": 75,
              "line": 98
            }
          }
        },
        {
          "id": "856",
          "mutatorName": "EqualityOperator",
          "replacement": "durationMs < 0",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"Infinity\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:154:48)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 90,
              "line": 98
            },
            "start": {
              "column": 75,
              "line": 98
            }
          }
        },
        {
          "id": "857",
          "mutatorName": "EqualityOperator",
          "replacement": "durationMs > 0",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: 0\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 3,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "29"
          ],
          "location": {
            "end": {
              "column": 90,
              "line": 98
            },
            "start": {
              "column": 75,
              "line": 98
            }
          }
        },
        {
          "id": "858",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 0\nReceived: \"Infinity\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:154:48)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 100
            },
            "start": {
              "column": 92,
              "line": 98
            }
          }
        },
        {
          "id": "859",
          "mutatorName": "ArithmeticOperator",
          "replacement": "tokenCount * (durationMs / 1000)",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: \"500.0\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "29"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 102
            },
            "start": {
              "column": 11,
              "line": 102
            }
          }
        },
        {
          "id": "860",
          "mutatorName": "ArithmeticOperator",
          "replacement": "durationMs * 1000",
          "statusReason": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"20.0\"\nReceived: \"0.0\"\n    at Object.toBe (/workspaces/LocalLLMDemo/.stryker-tmp/sandbox-wheV1a/src/utils/text-processing.test.js:150:22)\n    at Promise.then.completed (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:121:9)\n    at run (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/workspaces/LocalLLMDemo/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/workspaces/LocalLLMDemo/node_modules/jest-runner/build/runTest.js:444:34)",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "29"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 102
            },
            "start": {
              "column": 25,
              "line": 102
            }
          }
        }
      ],
      "source": "// Text processing utilities for LLM and TTS\nexport function splitTextIntoChunks(text, chunkSize = 100) {\n  if (!text || typeof text !== 'string') {\n    return [];\n  }\n\n  const words = text.trim().split(/\\s+/);\n  const chunks = [];\n  let currentChunk = [];\n\n  for (const word of words) {\n    if (currentChunk.join(' ').length + word.length + 1 <= chunkSize) {\n      currentChunk.push(word);\n    } else {\n      if (currentChunk.length > 0) {\n        chunks.push(currentChunk.join(' '));\n        currentChunk = [word];\n      } else {\n        // Word is longer than chunk size, add it anyway\n        chunks.push(word);\n      }\n    }\n  }\n\n  if (currentChunk.length > 0) {\n    chunks.push(currentChunk.join(' '));\n  }\n\n  return chunks;\n}\n\nexport function splitIntoSentences(text) {\n  return text\n    .split(/[.!?]+/)\n    .map(s => s.trim())\n    .filter(s => s.length > 0)\n    .map(s => s + '.');\n}\n\nexport function formatPromptForInstruction(prompt) {\n  return `<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n<|im_start|>user\n${prompt}<|im_end|>\n<|im_start|>assistant\n`;\n}\n\nexport function normalizeText(text) {\n  if (!text || typeof text !== 'string') {\n    return '';\n  }\n\n  return text\n    .trim()\n    .replace(/\\s+/g, ' ')\n    .replace(/([.!?])\\s*([A-Z])/g, '$1 $2');\n}\n\nexport function estimateTokenCount(text) {\n  if (!text || typeof text !== 'string') {\n    return 0;\n  }\n\n  // Rough estimation: ~4 characters per token for English text\n  return Math.ceil(text.length / 4);\n}\n\nexport function tokenizeForDisplay(text) {\n  // Simple tokenization for display purposes\n  const words = text.split(/(\\s+)/);\n  return words.filter(word => word.length > 0);\n}\n\nexport function formatDuration(seconds) {\n  if (typeof seconds !== 'number' || seconds < 0) {\n    return '0:00';\n  }\n\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n\nexport function debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nexport function calculateTokensPerSecond(tokenCount, durationMs) {\n  if (typeof tokenCount !== 'number' || typeof durationMs !== 'number' || durationMs <= 0) {\n    return 0;\n  }\n\n  return (tokenCount / (durationMs / 1000)).toFixed(1);\n}\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 90,
    "low": 80,
    "break": 80
  },
  "testFiles": {
    "src/utils/text-processing.test.js": {
      "tests": [
        {
          "id": "0",
          "name": "Text Processing Utilities splitTextIntoChunks should split text into chunks of specified size",
          "location": {
            "start": {
              "column": 6,
              "line": 15
            }
          }
        },
        {
          "id": "1",
          "name": "Text Processing Utilities splitTextIntoChunks should handle empty or invalid input",
          "location": {
            "start": {
              "column": 6,
              "line": 25
            }
          }
        },
        {
          "id": "2",
          "name": "Text Processing Utilities splitTextIntoChunks should handle single word longer than chunk size",
          "location": {
            "start": {
              "column": 6,
              "line": 31
            }
          }
        },
        {
          "id": "3",
          "name": "Text Processing Utilities normalizeText should normalize whitespace and punctuation",
          "location": {
            "start": {
              "column": 6,
              "line": 38
            }
          }
        },
        {
          "id": "4",
          "name": "Text Processing Utilities normalizeText should handle empty or invalid input",
          "location": {
            "start": {
              "column": 6,
              "line": 45
            }
          }
        },
        {
          "id": "5",
          "name": "Text Processing Utilities splitIntoSentences should split text into sentences",
          "location": {
            "start": {
              "column": 6,
              "line": 53
            }
          }
        },
        {
          "id": "6",
          "name": "Text Processing Utilities splitIntoSentences should handle empty text",
          "location": {
            "start": {
              "column": 6,
              "line": 60
            }
          }
        },
        {
          "id": "7",
          "name": "Text Processing Utilities splitIntoSentences should handle text without punctuation",
          "location": {
            "start": {
              "column": 6,
              "line": 64
            }
          }
        },
        {
          "id": "8",
          "name": "Text Processing Utilities formatPromptForInstruction should format prompt with instruction template",
          "location": {
            "start": {
              "column": 6,
              "line": 71
            }
          }
        },
        {
          "id": "9",
          "name": "Text Processing Utilities tokenizeForDisplay should tokenize text for display",
          "location": {
            "start": {
              "column": 6,
              "line": 84
            }
          }
        },
        {
          "id": "10",
          "name": "Text Processing Utilities tokenizeForDisplay should handle empty text",
          "location": {
            "start": {
              "column": 6,
              "line": 93
            }
          }
        },
        {
          "id": "11",
          "name": "Text Processing Utilities estimateTokenCount should estimate token count for text",
          "location": {
            "start": {
              "column": 6,
              "line": 100
            }
          }
        },
        {
          "id": "12",
          "name": "Text Processing Utilities estimateTokenCount should handle empty or invalid input",
          "location": {
            "start": {
              "column": 6,
              "line": 108
            }
          }
        },
        {
          "id": "13",
          "name": "Text Processing Utilities formatDuration should format seconds to MM:SS format",
          "location": {
            "start": {
              "column": 6,
              "line": 116
            }
          }
        },
        {
          "id": "14",
          "name": "Text Processing Utilities formatDuration should handle invalid input",
          "location": {
            "start": {
              "column": 6,
              "line": 122
            }
          }
        },
        {
          "id": "15",
          "name": "Text Processing Utilities debounce should debounce function calls",
          "location": {
            "start": {
              "column": 6,
              "line": 129
            }
          }
        },
        {
          "id": "16",
          "name": "Text Processing Utilities calculateTokensPerSecond should calculate tokens per second",
          "location": {
            "start": {
              "column": 6,
              "line": 147
            }
          }
        },
        {
          "id": "17",
          "name": "Text Processing Utilities calculateTokensPerSecond should handle invalid input",
          "location": {
            "start": {
              "column": 6,
              "line": 152
            }
          }
        }
      ],
      "source": "import { \n  splitTextIntoChunks, \n  normalizeText, \n  estimateTokenCount, \n  splitIntoSentences,\n  formatPromptForInstruction,\n  tokenizeForDisplay,\n  formatDuration,\n  debounce,\n  calculateTokensPerSecond\n} from './text-processing.js';\n\ndescribe('Text Processing Utilities', () => {\n  describe('splitTextIntoChunks', () => {\n    test('should split text into chunks of specified size', () => {\n      const text = 'This is a long sentence that should be split into multiple chunks for processing.';\n      const chunks = splitTextIntoChunks(text, 20);\n      \n      expect(chunks.length).toBeGreaterThan(1);\n      chunks.forEach(chunk => {\n        expect(chunk.length).toBeLessThanOrEqual(20);\n      });\n    });\n\n    test('should handle empty or invalid input', () => {\n      expect(splitTextIntoChunks('')).toEqual([]);\n      expect(splitTextIntoChunks(null)).toEqual([]);\n      expect(splitTextIntoChunks(undefined)).toEqual([]);\n    });\n\n    test('should handle single word longer than chunk size', () => {\n      const chunks = splitTextIntoChunks('supercalifragilisticexpialidocious', 10);\n      expect(chunks).toEqual(['supercalifragilisticexpialidocious']);\n    });\n  });\n\n  describe('normalizeText', () => {\n    test('should normalize whitespace and punctuation', () => {\n      const text = '  Hello    world.How are you?Fine!  ';\n      const normalized = normalizeText(text);\n      \n      expect(normalized).toBe('Hello world. How are you? Fine!');\n    });\n\n    test('should handle empty or invalid input', () => {\n      expect(normalizeText('')).toBe('');\n      expect(normalizeText(null)).toBe('');\n      expect(normalizeText(undefined)).toBe('');\n    });\n  });\n\n  describe('splitIntoSentences', () => {\n    test('should split text into sentences', () => {\n      const text = 'Hello world. How are you? Fine!';\n      const sentences = splitIntoSentences(text);\n      \n      expect(sentences).toEqual(['Hello world.', 'How are you.', 'Fine.']);\n    });\n\n    test('should handle empty text', () => {\n      expect(splitIntoSentences('')).toEqual([]);\n    });\n\n    test('should handle text without punctuation', () => {\n      const sentences = splitIntoSentences('Hello world');\n      expect(sentences).toEqual(['Hello world.']);\n    });\n  });\n\n  describe('formatPromptForInstruction', () => {\n    test('should format prompt with instruction template', () => {\n      const prompt = 'What is AI?';\n      const formatted = formatPromptForInstruction(prompt);\n      \n      expect(formatted).toContain('<|im_start|>system');\n      expect(formatted).toContain('You are a helpful assistant.');\n      expect(formatted).toContain('<|im_start|>user');\n      expect(formatted).toContain('What is AI?');\n      expect(formatted).toContain('<|im_start|>assistant');\n    });\n  });\n\n  describe('tokenizeForDisplay', () => {\n    test('should tokenize text for display', () => {\n      const text = 'Hello world test';\n      const tokens = tokenizeForDisplay(text);\n      \n      expect(tokens).toContain('Hello');\n      expect(tokens).toContain('world');\n      expect(tokens).toContain('test');\n    });\n\n    test('should handle empty text', () => {\n      const tokens = tokenizeForDisplay('');\n      expect(tokens).toEqual([]);\n    });\n  });\n\n  describe('estimateTokenCount', () => {\n    test('should estimate token count for text', () => {\n      const text = 'Hello world';\n      const count = estimateTokenCount(text);\n      \n      expect(count).toBeGreaterThan(0);\n      expect(typeof count).toBe('number');\n    });\n\n    test('should handle empty or invalid input', () => {\n      expect(estimateTokenCount('')).toBe(0);\n      expect(estimateTokenCount(null)).toBe(0);\n      expect(estimateTokenCount(undefined)).toBe(0);\n    });\n  });\n\n  describe('formatDuration', () => {\n    test('should format seconds to MM:SS format', () => {\n      expect(formatDuration(65)).toBe('1:05');\n      expect(formatDuration(0)).toBe('0:00');\n      expect(formatDuration(3661)).toBe('61:01');\n    });\n\n    test('should handle invalid input', () => {\n      expect(formatDuration(-1)).toBe('0:00');\n      expect(formatDuration('invalid')).toBe('0:00');\n    });\n  });\n\n  describe('debounce', () => {\n    test('should debounce function calls', (done) => {\n      let callCount = 0;\n      const fn = debounce(() => {\n        callCount++;\n      }, 50);\n\n      fn();\n      fn();\n      fn();\n\n      setTimeout(() => {\n        expect(callCount).toBe(1);\n        done();\n      }, 100);\n    });\n  });\n\n  describe('calculateTokensPerSecond', () => {\n    test('should calculate tokens per second', () => {\n      const result = calculateTokensPerSecond(100, 5000); // 100 tokens in 5 seconds\n      expect(result).toBe('20.0');\n    });\n\n    test('should handle invalid input', () => {\n      expect(calculateTokensPerSecond(100, 0)).toBe(0);\n      expect(calculateTokensPerSecond('invalid', 1000)).toBe(0);\n    });\n  });\n});\n"
    },
    "src/components/audio-processor.property.test.js": {
      "tests": [
        {
          "id": "18",
          "name": "AudioProcessor Property Tests Property-Based Tests should always return processed audio data",
          "location": {
            "start": {
              "column": 10,
              "line": 13
            }
          }
        },
        {
          "id": "19",
          "name": "AudioProcessor Property Tests Property-Based Tests should correctly track buffer length",
          "location": {
            "start": {
              "column": 10,
              "line": 25
            }
          }
        },
        {
          "id": "20",
          "name": "AudioProcessor Property Tests Metamorphic Tests should double buffer size when processing same data twice",
          "location": {
            "start": {
              "column": 10,
              "line": 40
            }
          }
        },
        {
          "id": "21",
          "name": "AudioProcessor Property Tests Metamorphic Tests should reset buffer length to zero after clearing",
          "location": {
            "start": {
              "column": 10,
              "line": 53
            }
          }
        },
        {
          "id": "22",
          "name": "AudioProcessor Property Tests Edge Case Tests should handle empty audio data",
          "location": {
            "start": {
              "column": 10,
              "line": 68
            }
          }
        },
        {
          "id": "23",
          "name": "AudioProcessor Property Tests Edge Case Tests should handle large sample rates correctly",
          "location": {
            "start": {
              "column": 10,
              "line": 74
            }
          }
        },
        {
          "id": "24",
          "name": "AudioProcessor Property Tests Edge Case Tests should calculate duration correctly",
          "location": {
            "start": {
              "column": 10,
              "line": 84
            }
          }
        }
      ],
      "source": "import fc from 'fast-check';\nimport { AudioProcessor } from './audio-processor.js';\n\ndescribe('AudioProcessor Property Tests', () => {\n\n    // Arbitraries for generating valid audio data\n    const audioDataArb = fc.array(fc.float({ min: -1, max: 1 }), { minLength: 1, maxLength: 1000 });\n    const sampleRateArb = fc.integer({ min: 8000, max: 48000 });\n\n    // Property-Based Testing\n    describe('Property-Based Tests', () => {\n        // Property: Processing audio should always return the same data\n        it('should always return processed audio data', () => {\n            fc.assert(\n                fc.property(sampleRateArb, audioDataArb, (sampleRate, audioData) => {\n                    const processor = new AudioProcessor(sampleRate);\n                    const result = processor.processAudioChunk(new Float32Array(audioData));\n                    expect(result).toBeInstanceOf(Float32Array);\n                    expect(result.length).toBe(audioData.length);\n                })\n            );\n        });\n\n        // Property: Buffer length should increase with processed chunks\n        it('should correctly track buffer length', () => {\n            fc.assert(\n                fc.property(audioDataArb, (audioData) => {\n                    const processor = new AudioProcessor();\n                    const initialLength = processor.getBufferLength();\n                    processor.processAudioChunk(new Float32Array(audioData));\n                    expect(processor.getBufferLength()).toBe(initialLength + audioData.length);\n                })\n            );\n        });\n    });\n\n    // Metamorphic Testing\n    describe('Metamorphic Tests', () => {\n        // Metamorphic Relation: Processing the same data twice should double buffer size\n        it('should double buffer size when processing same data twice', () => {\n            fc.assert(\n                fc.property(audioDataArb, (audioData) => {\n                    const processor = new AudioProcessor();\n                    processor.processAudioChunk(new Float32Array(audioData));\n                    const firstLength = processor.getBufferLength();\n                    processor.processAudioChunk(new Float32Array(audioData));\n                    expect(processor.getBufferLength()).toBe(firstLength * 2);\n                })\n            );\n        });\n\n        // Metamorphic Relation: Clear buffer should reset length to zero\n        it('should reset buffer length to zero after clearing', () => {\n            fc.assert(\n                fc.property(audioDataArb, (audioData) => {\n                    const processor = new AudioProcessor();\n                    processor.processAudioChunk(new Float32Array(audioData));\n                    processor.clearBuffer();\n                    expect(processor.getBufferLength()).toBe(0);\n                })\n            );\n        });\n    });\n\n    // Edge Case Testing\n    describe('Edge Case Tests', () => {\n        // Test with empty audio data\n        it('should handle empty audio data', () => {\n            const processor = new AudioProcessor();\n            expect(() => processor.processAudioChunk(new Float32Array([]))).toThrow('Invalid audio data');\n        });\n\n        // Test with very large sample rates\n        it('should handle large sample rates correctly', () => {\n            fc.assert(\n                fc.property(fc.integer({ min: 44100, max: 192000 }), (sampleRate) => {\n                    const processor = new AudioProcessor(sampleRate);\n                    expect(processor.sampleRate).toBe(sampleRate);\n                })\n            );\n        });\n\n        // Test duration calculation\n        it('should calculate duration correctly', () => {\n            fc.assert(\n                fc.property(sampleRateArb, audioDataArb, (sampleRate, audioData) => {\n                    const processor = new AudioProcessor(sampleRate);\n                    processor.processAudioChunk(new Float32Array(audioData));\n                    const expectedDuration = audioData.length / sampleRate;\n                    expect(processor.getBufferDuration()).toBeCloseTo(expectedDuration, 5);\n                })\n            );\n        });\n    });\n});\n"
    },
    "src/utils/text-processing.property.test.js": {
      "tests": [
        {
          "id": "25",
          "name": "Property-based tests for utils splitTextIntoChunks preserves text content",
          "location": {
            "start": {
              "column": 6,
              "line": 13
            }
          }
        },
        {
          "id": "26",
          "name": "Property-based tests for utils splitIntoSentences adds punctuation",
          "location": {
            "start": {
              "column": 6,
              "line": 25
            }
          }
        },
        {
          "id": "27",
          "name": "Property-based tests for utils estimateTokenCount returns positive for non-empty text",
          "location": {
            "start": {
              "column": 6,
              "line": 35
            }
          }
        },
        {
          "id": "28",
          "name": "Property-based tests for utils formatDuration handles valid inputs",
          "location": {
            "start": {
              "column": 6,
              "line": 45
            }
          }
        },
        {
          "id": "29",
          "name": "Property-based tests for utils calculateTokensPerSecond returns valid rate",
          "location": {
            "start": {
              "column": 6,
              "line": 55
            }
          }
        }
      ],
      "source": "import fc from 'fast-check';\nimport { \n  splitTextIntoChunks, \n  splitIntoSentences, \n  estimateTokenCount, \n  formatDuration, \n  calculateTokensPerSecond \n} from './text-processing.js';\n\n// Property-Based Test for utils functions\ndescribe('Property-based tests for utils', () => {\n    // Property: Split chunks should preserve total text length\n    test('splitTextIntoChunks preserves text content', () => {\n        fc.assert(\n            fc.property(fc.string({ minLength: 1, maxLength: 1000 }), fc.integer({ min: 10, max: 200 }), (text, chunkSize) => {\n                const chunks = splitTextIntoChunks(text, chunkSize);\n                const rejoined = chunks.join(' ').replace(/\\s+/g, ' ').trim();\n                const normalizedOriginal = text.trim().replace(/\\s+/g, ' ');\n                return rejoined === normalizedOriginal;\n            })\n        );\n    });\n\n    // Property: Sentences should end with punctuation\n    test('splitIntoSentences adds punctuation', () => {\n        fc.assert(\n            fc.property(fc.string({ minLength: 1, maxLength: 500 }), (text) => {\n                const sentences = splitIntoSentences(text);\n                return sentences.every(sentence => sentence.endsWith('.'));\n            })\n        );\n    });\n\n    // Property: Token count should be positive for non-empty text\n    test('estimateTokenCount returns positive for non-empty text', () => {\n        fc.assert(\n            fc.property(fc.string({ minLength: 1, maxLength: 1000 }), (text) => {\n                const count = estimateTokenCount(text);\n                return count > 0;\n            })\n        );\n    });\n\n    // Property: Format duration should be valid for non-negative numbers\n    test('formatDuration handles valid inputs', () => {\n        fc.assert(\n            fc.property(fc.float({ min: 0, max: 3600 }), (seconds) => {\n                const formatted = formatDuration(seconds);\n                return typeof formatted === 'string' && formatted.includes(':');\n            })\n        );\n    });\n\n    // Property: Tokens per second calculation\n    test('calculateTokensPerSecond returns valid rate', () => {\n        fc.assert(\n            fc.property(fc.integer({ min: 1, max: 1000 }), fc.integer({ min: 100, max: 10000 }), (tokens, ms) => {\n                const rate = calculateTokensPerSecond(tokens, ms);\n                return parseFloat(rate) >= 0;\n            })\n        );\n    });\n});\n"
    },
    "src/components/audio-processor.test.js": {
      "tests": [
        {
          "id": "30",
          "name": "AudioProcessor should initialize with correct sample rate",
          "location": {
            "start": {
              "column": 4,
              "line": 10
            }
          }
        },
        {
          "id": "31",
          "name": "AudioProcessor should process Float32Array audio chunks",
          "location": {
            "start": {
              "column": 4,
              "line": 15
            }
          }
        },
        {
          "id": "32",
          "name": "AudioProcessor should process Array audio chunks",
          "location": {
            "start": {
              "column": 4,
              "line": 23
            }
          }
        },
        {
          "id": "33",
          "name": "AudioProcessor should throw error for invalid audio data",
          "location": {
            "start": {
              "column": 4,
              "line": 32
            }
          }
        },
        {
          "id": "34",
          "name": "AudioProcessor should calculate buffer duration correctly",
          "location": {
            "start": {
              "column": 4,
              "line": 38
            }
          }
        },
        {
          "id": "35",
          "name": "AudioProcessor should clear buffer",
          "location": {
            "start": {
              "column": 4,
              "line": 45
            }
          }
        },
        {
          "id": "36",
          "name": "AudioProcessor should resample audio",
          "location": {
            "start": {
              "column": 4,
              "line": 53
            }
          }
        }
      ],
      "source": "import { AudioProcessor } from './audio-processor.js';\n\ndescribe('AudioProcessor', () => {\n  let processor;\n\n  beforeEach(() => {\n    processor = new AudioProcessor(24000);\n  });\n\n  test('should initialize with correct sample rate', () => {\n    expect(processor.sampleRate).toBe(24000);\n    expect(processor.getBufferLength()).toBe(0);\n  });\n\n  test('should process Float32Array audio chunks', () => {\n    const audioData = new Float32Array([0.1, 0.2, 0.3]);\n    const result = processor.processAudioChunk(audioData);\n    \n    expect(result).toEqual(audioData);\n    expect(processor.getBufferLength()).toBe(3);\n  });\n\n  test('should process Array audio chunks', () => {\n    const audioData = [0.1, 0.2, 0.3];\n    const result = processor.processAudioChunk(audioData);\n    \n    expect(result).toBeInstanceOf(Float32Array);\n    expect(result.length).toBe(audioData.length);\n    expect(processor.getBufferLength()).toBe(3);\n  });\n\n  test('should throw error for invalid audio data', () => {\n    expect(() => processor.processAudioChunk(null)).toThrow('Invalid audio data');\n    expect(() => processor.processAudioChunk([])).toThrow('Invalid audio data');\n    expect(() => processor.processAudioChunk(\"invalid\")).toThrow('Audio data must be Float32Array or Array');\n  });\n\n  test('should calculate buffer duration correctly', () => {\n    const audioData = new Float32Array(24000); // 1 second of audio at 24kHz\n    processor.processAudioChunk(audioData);\n    \n    expect(processor.getBufferDuration()).toBe(1);\n  });\n\n  test('should clear buffer', () => {\n    processor.processAudioChunk(new Float32Array([1, 2, 3]));\n    expect(processor.getBufferLength()).toBe(3);\n    \n    processor.clearBuffer();\n    expect(processor.getBufferLength()).toBe(0);\n  });\n\n  test('should resample audio', () => {\n    // Fill buffer with test data\n    processor.buffer = [1, 2, 3, 4, 5, 6];\n    \n    // Test no resampling needed\n    const noResample = processor.resample(24000);\n    expect(noResample).toEqual(new Float32Array([1, 2, 3, 4, 5, 6]));\n    \n    // Test downsampling\n    const downsampled = processor.resample(12000);\n    expect(downsampled.length).toBe(3);\n    expect(downsampled[0]).toBe(1);\n    expect(downsampled[1]).toBe(3);\n    expect(downsampled[2]).toBe(5);\n  });\n});\n"
    },
    "src/index.test.js": {
      "tests": [
        {
          "id": "37",
          "name": "Local LLM Demo Configuration CONFIG contains required constants",
          "location": {
            "start": {
              "column": 4,
              "line": 10
            }
          }
        },
        {
          "id": "38",
          "name": "Local LLM Demo Configuration splitIntoSentences correctly splits text",
          "location": {
            "start": {
              "column": 4,
              "line": 19
            }
          }
        },
        {
          "id": "39",
          "name": "Local LLM Demo Configuration splitIntoSentences handles empty and single sentence text",
          "location": {
            "start": {
              "column": 4,
              "line": 29
            }
          }
        },
        {
          "id": "40",
          "name": "Local LLM Demo Configuration formatPromptForInstruction creates proper format",
          "location": {
            "start": {
              "column": 4,
              "line": 34
            }
          }
        },
        {
          "id": "41",
          "name": "Local LLM Demo Configuration detectWebGPUSupport returns boolean",
          "location": {
            "start": {
              "column": 4,
              "line": 45
            }
          }
        },
        {
          "id": "42",
          "name": "Local LLM Demo Configuration getOptimalDevice returns valid device",
          "location": {
            "start": {
              "column": 4,
              "line": 50
            }
          }
        }
      ],
      "source": "import { \n  CONFIG, \n  splitIntoSentences, \n  formatPromptForInstruction, \n  detectWebGPUSupport, \n  getOptimalDevice \n} from './index.js';\n\ndescribe('Local LLM Demo Configuration', () => {\n  test('CONFIG contains required constants', () => {\n    expect(CONFIG.LLM_MODEL_ID).toBeDefined();\n    expect(CONFIG.TTS_MODEL_ID).toBeDefined();\n    expect(CONFIG.SAMPLE_RATE).toBe(24000);\n    expect(CONFIG.MAX_NEW_TOKENS).toBe(256);\n    expect(CONFIG.TEMPERATURE).toBe(0.8);\n    expect(CONFIG.TOP_P).toBe(0.95);\n  });\n\n  test('splitIntoSentences correctly splits text', () => {\n    const text = \"Hello world. This is a test! How are you?\";\n    const sentences = splitIntoSentences(text);\n    \n    expect(sentences).toHaveLength(3);\n    expect(sentences[0]).toBe(\"Hello world.\");\n    expect(sentences[1]).toBe(\"This is a test.\");\n    expect(sentences[2]).toBe(\"How are you.\");\n  });\n\n  test('splitIntoSentences handles empty and single sentence text', () => {\n    expect(splitIntoSentences(\"\")).toEqual([]);\n    expect(splitIntoSentences(\"Single sentence\")).toEqual([\"Single sentence.\"]);\n  });\n\n  test('formatPromptForInstruction creates proper format', () => {\n    const prompt = \"Tell me about AI\";\n    const formatted = formatPromptForInstruction(prompt);\n    \n    expect(formatted).toContain(\"<|im_start|>system\");\n    expect(formatted).toContain(\"You are a helpful assistant.\");\n    expect(formatted).toContain(\"<|im_start|>user\");\n    expect(formatted).toContain(\"Tell me about AI\");\n    expect(formatted).toContain(\"<|im_start|>assistant\");\n  });\n\n  test('detectWebGPUSupport returns boolean', () => {\n    const result = detectWebGPUSupport();\n    expect(typeof result).toBe('boolean');\n  });\n\n  test('getOptimalDevice returns valid device', () => {\n    const device = getOptimalDevice();\n    expect(['webgpu', 'wasm']).toContain(device);\n  });\n});\n"
    }
  },
  "projectRoot": "/workspaces/LocalLLMDemo",
  "config": {
    "testRunner": "jest",
    "reporters": [
      "clear-text",
      "json",
      "progress",
      "html"
    ],
    "mutate": [
      "src/**/*.js",
      "!src/**/*.test.js"
    ],
    "coverageAnalysis": "perTest",
    "thresholds": {
      "high": 90,
      "low": 80,
      "break": 80
    },
    "jsonReporter": {
      "fileName": "mutation-testing/reports/mutation-report.json"
    },
    "configFile": "config/stryker.conf.json",
    "allowConsoleColors": true,
    "checkers": [],
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true,
      "skipFull": false
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignorePatterns": [],
    "ignoreStatic": false,
    "incremental": false,
    "incrementalFile": "reports/stryker-incremental.json",
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "plugins": [
      "@stryker-mutator/*"
    ],
    "appendPlugins": [],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "disableTypeChecks": true,
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "tsconfigFile": "tsconfig.json",
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "ignorers": [],
    "jest": {
      "projectType": "custom",
      "enableFindRelatedTests": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "9.0.1",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/jest-runner": "9.0.1",
      "jest": "29.7.0",
      "typescript": "5.9.2"
    }
  }
}